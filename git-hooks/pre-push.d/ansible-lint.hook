#!/bin/sh

# Rename to ansible-lint.hook and alter to your needs.
GIT_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
ROLES_LIST=$(cd "$GIT_DIR" && find roles/ -type d -name "tasks" -exec dirname {} \;)
ANSIBLE_LINT="/usr/local/bin/ansible-lint"
PROVISION_CONTAINER="provision-controller"
CONTAINER_BASE_PATH="/home/ce-dev/ce-provision"
OS=$(uname -s)
DOCKER_USER="ce-dev"
if [ "$OS" = "Darwin" ]; then
    DOCKER_BIN="docker"
else
    DOCKER_BIN="sudo docker"
fi
DOCKER_CMD="$DOCKER_BIN exec --user $DOCKER_USER --workdir $CONTAINER_BASE_PATH -i $PROVISION_CONTAINER"

# Base branch to compare diff.
BASE_BRANCH="2.x"
for file in $(git diff "$1/$BASE_BRANCH" --name-only --staged); do
  if [ -f "$GIT_DIR/$file" ]; then
    for ROLE in $ROLES_LIST; do
      case $file in
        "$ROLE"*)
          printf "\e[36m Running Ansible linter against the\e[1m %s\e[0m\e[36m role. \e[0m \n" "$ROLE"
          ANSIBLE_LINT_CMD="$DOCKER_CMD $ANSIBLE_LINT $CONTAINER_BASE_PATH/$ROLE"
          ERRORS=$($ANSIBLE_LINT_CMD | wc -l)
          if [ "$ERRORS" != "0" ]; then
            $ANSIBLE_LINT_CMD
            printf "\e[31mCoding Standard violations detected. Can not proceed with push.\e[0m\n"
            echo "If you really need to bypass this, use git push --no-verify."
            exit 1
          fi
          ;;
      esac
    done
  fi
done
exit 0
