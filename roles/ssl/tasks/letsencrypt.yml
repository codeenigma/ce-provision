---
# cron is not necessarily installed by default.
- name: Ensure cron is installed.
  ansible.builtin.apt:
    name: cron
    state: present
    update_cache: true

- name: Ensure Certbot is installed.
  ansible.builtin.apt:
    pkg: certbot
    state: present

- name: Set LetsEncrypt variables.
  ansible.builtin.set_fact:
    _ssl_web_server: "{{ ssl.web_server | default('standalone') }}"
    _ssl_services: "{{ ssl.services | default ([]) }}"

# @todo - add support for Route 53 DNS plugin
- name: "Ensure certbot-{{ _ssl_web_server }} plugin is installed."
  ansible.builtin.apt:
    pkg: "python3-certbot-{{ _ssl_web_server }}"
    state: present
  when:
    - _ssl_web_server != 'standalone'

- name: Define SSL base path.
  ansible.builtin.set_fact:
    _ssl_base_path: "/etc/letsencrypt/live"

- name: Add key/cert pairs to know paths information.
  ansible.builtin.set_fact:
    ssl_facts: "{{ ssl_facts | combine({ certificate_domain: { 'domain': certificate_domain, 'certificate': _ssl_base_path + '/' + certificate_domain + '/fullchain.pem', 'key': _ssl_base_path + '/' + certificate_domain + '/privkey.pem' } }) }}"
  with_items: "{{ _ssl_domains }}"
  loop_control:
    loop_var: certificate_domain

- name: Check if we have a certificate.
  ansible.builtin.stat:
    path: "{{ ssl_facts[_ssl_domains[0]].certificate }}" # it's sufficient to check the first domain for a SAN cert
  register: letsencrypt_cert

- name: Stop services listening on port 80.
  ansible.builtin.service:
    name: "{{ ssl_service }}"
    state: stopped
  with_items: "{{ _ssl_services }}"
  loop_control:
    loop_var: ssl_service
  when:
    - not letsencrypt_cert.stat.exists
    - _ssl_services | length > 0

- name: Build certificate domains string.
  ansible.builtin.set_fact:
    _letsencrypt_domain_string: "{{ _letsencrypt_domain_string | default('') + ' -d ' + certificate_domain }}"
  with_items: "{{ _ssl_domains }}"
  loop_control:
    loop_var: certificate_domain
  when: not letsencrypt_cert.stat.exists

- name: Register certificate bypassing web server if needed.
  ansible.builtin.command: "{{ ssl.certbot_register_command }} --cert-name {{ ssl_facts[_ssl_domains[0]].domain }} --http-01-port {{ ssl.http_01_port }} -m {{ ssl.email }} --{{ _ssl_web_server }}{{ _letsencrypt_domain_string }}"
  when:
    - not letsencrypt_cert.stat.exists

- name: Restart services.
  ansible.builtin.service:
    name: "{{ ssl_service }}"
    state: started
  with_items: "{{ _ssl_services }}"
  loop_control:
    loop_var: ssl_service
  when:
    - not letsencrypt_cert.stat.exists
    - _ssl_services | length > 0

# Because of the scripted command each SSL implementation needs it's own uniquely named cron script.
- name: Create the certbot renewal script.
  ansible.builtin.template:
    src: le_cron.sh.j2
    dest: "/usr/local/bin/le_cron_{{ ssl_facts[_ssl_domains[0]].domain | regex_replace('\\.', '_') }}.sh"
    owner: root
    group: root
    mode: 0755
  when: ssl.autorenew

- name: Create cron job for certificate renewal.
  ansible.builtin.cron:
    name: "certbot renewal"
    minute: "{{ ssl.renewal_minute | default('0') }}"
    hour: "{{ ssl.renewal_hour | default('0') }}"
    day: "{{ ssl.renewal_day | default(omit) }}"
    weekday: "{{ ssl.renewal_weekday | default('0') }}" # default is weekly at midnight on Sunday
    job: "/usr/local/bin/le_cron_{{ ssl_facts[_ssl_domains[0]].domain | regex_replace('\\.', '_') }}.sh"
    cron_file: "le_autorenewal_{{ ssl_facts[_ssl_domains[0]].domain | regex_replace('\\.', '_') }}"
    user: root
  when: ssl.autorenew
