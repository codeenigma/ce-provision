---
- name: Check if certificates already exists
  ansible.builtin.stat:
    path: "{{ local_certs_path }}"
  register: certificates_folder
  delegate_to: localhost
  become: false
  tags:
    - generate-certs

- block:

  - name: Install OpenDistro dependencies
    ansible.builtin.apt:
      name: [
        'gpg', 'unzip', 'wget', 'curl', 'apt-transport-https', software-properties-common
        ]
      state: present

  - name: Install openjdk-11-jdk
    ansible.builtin.apt:
      name: openjdk-11-jdk
      state: present
    environment:
      JAVA_HOME: /usr

  - name: Local action | Create local temporary directory for certificates generation
    ansible.builtin.file:
      path: "{{ local_certs_path }}"
      mode: 0755
      state: directory

  - name: Local action | Check that the generation tool exists
    ansible.builtin.stat:
      path: "{{ local_certs_path }}/search-guard-tlstool-{{ certs_gen_tool_version }}.zip"
    register: tool_package

  - name: Local action | Download certificates generation tool
    ansible.builtin.get_url:
      url: "{{ certs_gen_tool_url }}"
      dest: "{{ local_certs_path }}/search-guard-tlstool-{{ certs_gen_tool_version }}.zip"
    when: not tool_package.stat.exists

  - name: Local action | Extract the certificates generation tool
    ansible.builtin.unarchive:
      src: "{{ local_certs_path }}/search-guard-tlstool-{{ certs_gen_tool_version }}.zip"
      dest: "{{ local_certs_path }}/"

  - name: Local action | Add the execution bit to the binary
    ansible.builtin.file:
      dest: "{{ local_certs_path }}/tools/sgtlstool.sh"
      mode: a+x

  - name: Local action | Prepare the certificates generation template file
    ansible.builtin.template:
      src: "templates/tlsconfig.yml.j2"
      dest: "{{ local_certs_path }}/config/tlsconfig.yml"
      mode: 0644
    register: tlsconfig_template

  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: "{{ local_certs_path }}/certs/"
      state: directory
      mode: '0755'

  - name: Local action | Check if root CA file exists
    ansible.builtin.stat:
      path: "{{ local_certs_path }}/certs/root-ca.key"
    register: root_ca_file

  - name: Local action | Generate the node & admin certificates in local
    ansible.builtin.command: >-
      {{ local_certs_path }}/tools/sgtlstool.sh
      -c {{ local_certs_path }}/config/tlsconfig.yml
      -ca -crt
      -t {{ local_certs_path }}/certs/
      -f -o
    when:
      - not root_ca_file.stat.exists
      - tlsconfig_template.changed

  - name: Local action | Generate the node & admin certificates using an existing root CA
    ansible.builtin.command: >-
     {{ local_certs_path }}/tools/sgtlstool.sh
     -c {{ local_certs_path }}/config/tlsconfig.yml
     -crt
     -t {{ local_certs_path }}/certs/
     -f
    when:
      - root_ca_file.stat.exists
      - tlsconfig_template.changed

  run_once: true
  delegate_to: localhost
  become: false
  tags:
    - generate-certs
  when:
    - not certificates_folder.stat.exists
