---
- name: Install OpenVPN server.
  ansible.builtin.include_role:
    name: robertdebock.openvpn

# Loop files from https://github.com/robertdebock/ansible-role-openvpn/blob/master/tasks/server.yml#L58
- name: Ensure keys permission are correct.
  ansible.builtin.file:
    path: /etc/openvpn/server/{{ item | basename }}
    mode: "0600"
  loop:
    - ca.crt
    - dh.pem
    - ta.key
    - issued/client.crt
    - issued/server.crt
    - private/ca.key
    - private/client.key
    - private/server.key

# Manipulate the server.conf file set by the OpenVPN role in Galaxy
- name: Prevent pushing DNS servers.
  ansible.builtin.lineinfile:
    path: "{{ openvpn_config.configuration_directory }}/server.conf"
    search_string: "dhcp-option DNS"
    state: absent

- name: Remove remote-cert-eku assumption.
  ansible.builtin.lineinfile:
    path: "{{ openvpn_config.configuration_directory }}/server.conf"
    search_string: "remote-cert-eku"
    state: absent

- name: Make forced redirect optional.
  ansible.builtin.lineinfile:
    path: "{{ openvpn_config.configuration_directory }}/server.conf"
    search_string: "redirect-gateway def1 bypass-dhcp"
    state: absent
  when: not openvpn_config.force_redirect_gateway

- name: Enable VPN compression.
  ansible.builtin.lineinfile:
    path: "{{ openvpn_config.configuration_directory }}/server.conf"
    line: comp-lzo
    create: true
  when: openvpn_config.compress

- name: Set no client cert required.
  ansible.builtin.lineinfile:
    path: "{{ openvpn_config.configuration_directory }}/server.conf"
    line: verify-client-cert none
    create: true
  when: openvpn_config.no_client_cert

# Handle LDAP configuration
- name: Place LDAP CA cert.
  ansible.builtin.copy:
    src: "{{ openvpn_config.ldap.tls_cert_local }}"
    dest: "{{ openvpn_config.ldap.tls_cert }}"
    owner: root
    group: root
    mode: "0644"
  when:
    - openvpn_config.ldap.tls_cert_local
    - openvpn_config.ldap.install

- name: Install OpenVPN LDAP auth package.
  ansible.builtin.package:
    name: openvpn-auth-ldap
    state: present
  when: openvpn_config.ldap.install

- name: Ensure LDAP config directory exists.
  ansible.builtin.file:
    path: "{{ openvpn_config.configuration_directory }}/auth"
    state: directory
    mode: "0755"

- name: Place auth-ldap.conf file.
  ansible.builtin.template:
    src: auth-ldap.conf.j2
    dest: "{{ openvpn_config.configuration_directory }}/auth/auth-ldap.conf"
    owner: root
    group: root
    mode: "0644"
  when: openvpn_config.ldap.install

- name: Enable LDAP config.
  ansible.builtin.lineinfile:
    path: "{{ openvpn_config.configuration_directory }}/server.conf"
    line: "plugin /usr/lib/openvpn/openvpn-auth-ldap.so {{ openvpn_config.configuration_directory }}/auth/auth-ldap.conf"
    create: true
  when: openvpn_config.ldap.install

- name: Place openvpn PAM config.
  ansible.builtin.template:
    src: openvpn.j2
    dest: /etc/pam.d/openvpn
    owner: root
    group: root
    mode: "0644"
  when: openvpn_config.pam.install

- name: Enable PAM config.
  ansible.builtin.lineinfile:
    path: "{{ openvpn_config.configuration_directory }}/server.conf"
    line: "plugin /usr/lib/x86_64-linux-gnu/openvpn/plugins/openvpn-plugin-auth-pam.so openvpn"
    create: true
  when: openvpn_config.pam.install

# Handle extra directives
- name: Create custom directives.
  ansible.builtin.lineinfile:
    path: "{{ openvpn_config.configuration_directory }}/server.conf"
    line: "{{ item }}"
    create: true
  loop: "{{ openvpn_config.custom_directives }}"
  when: openvpn_config.custom_directives

# @TODO this should be a handler if we change the LDAP config rather than a task
- name: Restart OpenVPN.
  ansible.builtin.systemd:
    name: "{{ openvpn_config.service }}"
    state: restarted
    daemon_reload: true
