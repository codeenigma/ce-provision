---
# We assume a single key by user. Grepping on the email throws errors if we have no keys already.
# @todo Find a better solution.
- name: Check if we already have a key.
  ansible.builtin.command:
    cmd: "gpg --list-secret-keys"
  register: user_ansible_gpg_key_exists
  become: true
  become_user: "{{ gpg_user.username }}"

- name: Ensure we have an usable Pinentry program.
  ansible.builtin.apt:
    pkg: ["pinentry-tty"]
    state: present
  when: not user_ansible_gpg_key_exists.stdout

- name: Create GPG template.
  ansible.builtin.template:
    src: "gpg.j2"
    dest: "/tmp/gpg-{{ gpg_user.username }}"
    mode: "0666"
  when: not user_ansible_gpg_key_exists.stdout

- name: Generate GPG key.
  ansible.builtin.command:
    cmd: "export GPG_TTY=$(tty); gpgconf --kill gpg-agent; gpg-agent --daemon; gpg --batch --generate-key /tmp/gpg-{{ gpg_user.username }}"
  become: true
  become_user: "{{ gpg_user.username }}"
  when: not user_ansible_gpg_key_exists.stdout

- name: Gather key ID.
  ansible.builtin.command:
    cmd: "gpg --list-secret-keys {{ gpg_user.email }} | grep '^  '"
  become: true
  become_user: "{{ gpg_user.username }}"
  register: user_ansible_gpg_key_id
  when:
    - gpg_user.publish
    - not user_ansible_gpg_key_exists.stdout

- name: Publish GPG key to openpgp.org.
  ansible.builtin.command:
    cmd: "gpg --keyserver {{ server }} --send-keys {{ user_ansible_gpg_key_id.stdout }}"
  become: true
  become_user: "{{ gpg_user.username }}"
  when:
    - gpg_user.publish
    - not user_ansible_gpg_key_exists.stdout
  with_items:
    - hkp://hkps.pool.sks-keyservers.net
    - hkps://pgp.mit.edu
    - hkps://keys.openpgp.org
    - hkp://keys.gnupg.net
  loop_control:
    loop_var: server