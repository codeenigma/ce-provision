---
- name: Ensure libnss-ldapd is installed.
  ansible.builtin.apt:
    pkg: [libpam-ldapd, libnss-ldapd]
    state: present
    update_cache: true

- name: Create certificate directory.
  ansible.builtin.file:
    path: /etc/ldap/ssl
    state: directory
  when: pam_ldap.ssl_certificate is defined and pam_ldap.ssl_certificate

- name: Copy certificate.
  ansible.builtin.copy:
    src: "{{ pam_ldap.ssl_certificate }}"
    dest: "/etc/ldap/ssl/{{ pam_ldap.ssl_certificate | basename }}"
    mode: "0666"
  when: pam_ldap.ssl_certificate is defined and pam_ldap.ssl_certificate

- name: Copy nslcd config.
  ansible.builtin.template:
    src: nslcd.conf.j2
    dest: /etc/nslcd.conf
    mode: "0600"

- name: Copy ldap config.
  ansible.builtin.template:
    src: ldap.conf.j2
    dest: /etc/ldap/ldap.conf
    mode: "0666"

- name: Copy nsswitch config.
  ansible.builtin.template:
    src: nsswitch.conf.j2
    dest: /etc/nsswitch.conf
    mode: "0666"

- name: Ensure sudo-ldap is installed.
  ansible.builtin.apt:
    pkg: sudo-ldap
    state: present

- name: Regenerate configuration from pam_ldap.
  ansible.builtin.debconf:
    name: libpam-ldapd

- name: Copy ldap config.
  ansible.builtin.template:
    src: sudo-ldap.conf.j2
    dest: /etc/sudo-ldap.conf
    mode: "0644"

- name: Copy PAM configuration.
  ansible.builtin.copy:
    src: "{{ file }}"
    dest: "/etc/pam.d/{{ file }}"
  with_items:
    - common-account
    - common-auth
    - common-password
    - common-session
    - common-session-noninteractive
  loop_control:
    loop_var: file

- name: Ensure sudoers are looked up.
  ansible.builtin.lineinfile:
    path: /etc/sudo-ldap.conf
    line: "sudoers_base ou=SUDOers,{{ pam_ldap.lookup_base }}"
    state: present

- name: Copy LDAP key script.
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/codeenigma/ssh-getkey-ldap/master/ssh-getkey-ldap
    dest: /usr/local/bin/ssh-getkey-ldap
    mode: 0555
    owner: root

- name: Create LDAP key script passwd file.
  ansible.builtin.template:
    src: ldap-bindpw.j2
    dest: /etc/ldap/ldap-bindpw
    mode: "0600"
    owner: root
  when:
    - ldap_client.binddn is defined and ldap_client.binddn
    - ldap_client.bindpw is defined and ldap_client.bindpw

- name: Create wrapper script for LDAP key script.
  ansible.builtin.template:
    src: ssh-getkey-ldap-wrapper.sh.j2
    dest: /usr/local/bin/ssh-getkey-ldap-wrapper.sh
    mode: "0555"
    owner: root
  when:
    - ldap_client.binddn is defined and ldap_client.binddn
    - ldap_client.bindpw is defined and ldap_client.bindpw

- name: Configure SSH pub key command if there is a binddn set.
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "AuthorizedKeysCommand "
    line: AuthorizedKeysCommand /usr/local/bin/ssh-getkey-ldap-wrapper.sh
  when:
    - ldap_client.binddn is defined and ldap_client.binddn

- name: Configure SSH pub key command if no binddn set.
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "AuthorizedKeysCommand "
    line: AuthorizedKeysCommand /usr/local/bin/ssh-getkey-ldap
  when:
    - not ldap_client.binddn

- name: Configure SSH pub key command user.
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "AuthorizedKeysCommandUser "
    line: AuthorizedKeysCommandUser root

- name: Restart nslcd service.
  ansible.builtin.service:
    name: nslcd
    state: restarted
  when: ansible_facts.services['nslcd.service'] is defined

- name: Restart nscd service.
  ansible.builtin.service:
    name: nscd
    state: restarted
  when: ansible_facts.services['nscd.service'] is defined

- name: Restart SSH service.
  ansible.builtin.service:
    name: ssh
    state: restarted
