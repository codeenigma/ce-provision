---
- name: Version check.
  ansible.builtin.debug:
    msg: "Using ce-provision {{ _init.ce_provision_version }}"

# @TODO This cannot work for ASGs.
# We will need something central for lock files and it cannot be controller servers because they may be containers.
- name: Check for a ce-deploy lock file.
  ansible.builtin.stat:
    path: "{{ _init.deploy_lock_file }}"
  register: _ce_deploy_lock

- name: Abort if ce-deploy lock file exists.
  when: _ce_deploy_lock.stat.exists is defined and _ce_deploy_lock.stat.exists
  block:
    - name: Abort if ce-deploy lock file is found.
      ansible.builtin.debug:
        msg: "ce-deploy lock file discovered, a deployment is in progress! If this is not the case, login to the affected server and delete the file at {{ _init.deploy_lock_file }}."
    - ansible.builtin.meta: end_play

- name: Check OS family.
  when: ansible_os_family != "Debian"
  block:
    - name: Abort if target is not a Debian server.
      ansible.builtin.debug:
        msg: "ce-provision currently only supports Debian based distributions of Linux."
    - ansible.builtin.meta: end_play

- name: Set a lock file.
  ansible.builtin.file:
    path: "{{ _init.lock_file }}"
    state: touch
    mode: 0644

# Load Linux services into ansible_facts.services.
- name: Populate service facts
  ansible.builtin.service_facts:

- name: Set "tracking" file for the playbook.
  ansible.builtin.set_fact:
    current_play_md5_file: "{{ _ce_provision_build_id }}-{{ playbook_dir | basename }}-{{ inventory_hostname }}"

- name: Sanitize tracking file name.
  ansible.builtin.set_fact:
    current_play_md5_file: "{{ current_play_md5_file | regex_replace('[^A-z0-9]', '') }}"

- name: Make sure file exists.
  ansible.builtin.copy:
    content: ""
    dest: "{{ _ce_provision_data_dir }}/{{ current_play_md5_file }}"
    force: false
    mode: "0666"
  delegate_to: localhost

- name: Check if vars dirs exist.
  ansible.builtin.stat:
    path: "{{ _init_vars_dir }}"
  delegate_to: localhost
  register: _init_vars_dir_exists
  with_items: "{{ _init.vars_dirs }}"
  loop_control:
    loop_var: _init_vars_dir

- name: Set an empty _init_vars_dirs_list variable in case none are provided.
  ansible.builtin.set_fact:
    _init_vars_dirs_list: []

- name: Build the list of directories to scan for changes.
  ansible.builtin.set_fact:
    _init_vars_dirs_list: "{{ _init_vars_dirs_list + [_init_vars_dir._init_vars_dir] }}"
  when: _init_vars_dir.stat.exists
  with_items: "{{ _init_vars_dir_exists.results }}"
  loop_control:
    loop_var: _init_vars_dir

- name: Compute files md5 hash.
  ansible.builtin.shell: 'set -o pipefail && find {{ _init_vars_dir }} -type f -exec md5sum {} \; | cut -d " " -f1 | md5sum'
  args:
    executable: /bin/bash
  delegate_to: "localhost"
  register: _init_vars_dirs_md5
  failed_when: false
  with_items:
    - "{{ _init_vars_dirs_list }}"
    - "{{ playbook_dir }}"
  loop_control:
    loop_var: _init_vars_dir

- name: Combine files md5 hash.
  ansible.builtin.set_fact:
    current_play_dir_md5: "{{ current_play_dir_md5 | default() + _init_vars_dir_md5.stdout }}"
  with_items: "{{ _init_vars_dirs_md5.results }}"
  loop_control:
    loop_var: _init_vars_dir_md5

- name: Lookup current playbook md5
  ansible.builtin.set_fact:
    previous_play_dir_md5: "{{ lookup('file', '{{ _ce_provision_data_dir }}/{{ current_play_md5_file }}') }}"

- name: Stop play if playbook md5 is unchanged.
  ansible.builtin.meta: end_play
  when:
    - current_play_dir_md5 == previous_play_dir_md5
    - not _init.force_play
    - not _ce_provision_force_play

- name: Include vars directories.
  ansible.builtin.include_vars:
    dir: "{{ _init_vars_dir_include }}"
    extensions:
      - "yml"
  with_items: "{{ _init_vars_dirs_list }}"
  loop_control:
    loop_var: _init_vars_dir_include

- name: Load custom vars file.
  ansible.builtin.include_tasks: allowed_vars.yml
  when:
    - _init.ce_provision_extra_repository
    - _init.ce_provision_extra_repository_vars_file
    - _init.ce_provision_extra_repository_allowed_vars

# Install Ansible under the controller user for all servers
# Ensure ansible_connection == 'ssh' (i.e. we are connecting to a server) before executing
- name: Install Ansible.
  when:
    - ansible_connection == 'ssh'
    - _init.install_ansible
  block:
    - name: Install ce-provision user.
      ansible.builtin.include_role:
        name: debian/user_provision

    - name: Install Ansible.
      ansible.builtin.include_role:
        name: debian/ansible
      vars:
        ce_ansible:
          venv_path: "{{ _venv_path }}"
          venv_command: "{{ _venv_command }}"
          install_username: "{{ _venv_install_username }}"
          upgrade:
            enabled: true
            command: "{{ _venv_path }}/bin/python3 -m pip install --upgrade ansible"
            on_calendar: "*-*-* 01:30:00"
            timer_name: "{{ _ce_ansible_timer_name }}"
          linters:
            enabled: false
