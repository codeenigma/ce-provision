- name: Create VPC subnet.
  ec2_vpc_subnet:
    profile: "{{ aws_vpc_subnet.aws_profile }}"
    cidr: "{{ subnet.cidr_block }}"
    region: "{{ aws_vpc_subnet.region }}"
    tags: "{{ aws_vpc_subnet.tags | combine( { 'Name': subnet.name } ) }}"
    az: "{{ aws_vpc_subnet.region }}{{ subnet.az }}"
    state: "{{ aws_vpc_subnet.state }}"
    vpc_id: "{{ _aws_vpc_subnet_vpc_id }}"
    assign_instances_ipv6: "{{ subnet.assign_instances_ipv6 | default('no') }}"
  register: _aws_vpc_subnet_subnet
  when: subnet.ipv6_cidr_block is not defined or (subnet.ipv6_cidr_block is defined and subnet.ipv6_cidr_block | length < 1)

- name: Set IPv6 subnet CIDR.
  set_fact:
    _ipv6_subnet_cidr: "{{ _aws_vpc_subnet_vpc.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block | ipsubnet(64, subnet.ipv6_cidr_block) }}"
  when:
    - subnet.ipv6_cidr_block is defined
    - subnet.ipv6_cidr_block | length > 0

- name: Print out IPv6 subnet CIDR for debugging.
  ansible.builtin.debug:
    msg: "{{ _ipv6_subnet_cidr }}"
  when:
    - subnet.ipv6_cidr_block is defined
    - subnet.ipv6_cidr_block | length > 0

- name: Create VPC subnet with IPv6.
  ec2_vpc_subnet:
    profile: "{{ aws_vpc_subnet.aws_profile }}"
    cidr: "{{ subnet.cidr_block }}"
    ipv6_cidr: "{{ _ipv6_subnet_cidr }}"
    region: "{{ aws_vpc_subnet.region }}"
    tags: "{{ aws_vpc_subnet.tags | combine( { 'Name': subnet.name } ) }}"
    az: "{{ aws_vpc_subnet.region }}{{ subnet.az }}"
    state: "{{ aws_vpc_subnet.state }}"
    vpc_id: "{{ _aws_vpc_subnet_vpc_id }}"
    assign_instances_ipv6: "{{ subnet.assign_instances_ipv6 | default('no') }}"
  register: _aws_vpc_subnet_subnet
  when:
    - subnet.ipv6_cidr_block is defined
    - subnet.ipv6_cidr_block | length > 0

- name: Create VPC ipv4 gateway.
  include_tasks: "gateway.ipv4.nat.yml"
  when: subnet.nat_ipv4 is defined and subnet.nat_ipv4

- name: Create matching Security Group.
  ec2_group:
    name: "{{ subnet.name }}"
    profile: "{{ aws_vpc_subnet.aws_profile }}"
    region: "{{ aws_vpc_subnet.region }}"
    tags: "{{ aws_vpc_subnet.tags | combine( { 'Name': subnet.name } ) }}"
    state: "{{ aws_vpc_subnet.state }}"
    vpc_id: "{{ _aws_vpc_subnet_vpc_id }}"
    description: "Allow internal traffic for subnet {{ subnet.name }}"
    rules:
      - proto: all
        group_name: "{{ subnet.name }}"
  when:
    - subnet.security_group is defined
    - subnet.security_group
