---
- name: Gather AMI image from name.
  amazon.aws.ec2_ami_info:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    region: "{{ aws_ec2_with_eip.region }}"
    owners: self
    filters:
      name: "{{ aws_ec2_with_eip.ami_name }}"
  register: _aws_ec2_with_eip_image

- name: Register latest AMI image.
  ansible.builtin.set_fact:
    _aws_ec2_with_eip_image_latest: "{{ _aws_ec2_with_eip_image.images | sort(attribute='creation_date') | last }}"

- name: Gather IAM role info.
  amazon.aws.iam_role_info:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    region: "{{ aws_ec2_with_eip.region }}"
    name: "{{ aws_ec2_with_eip.iam_role_name }}"
  register: _aws_ec2_with_eip_iam_role_info

# Find out if a server already exists.
- name: Blank the _aws_hostname variable.
  ansible.builtin.set_fact:
    _aws_hostname: ""

- name: Check to see if an Ansible host exists.
  ansible.builtin.set_fact:
    _aws_hostname: "{{ item }}"
  with_inventory_hostnames:
    - "{{ aws_ec2_with_eip.hostname }}"

# Subnet ID is stored in ce-provision's data directory
- name: Ensure server data directory exists.
  ansible.builtin.file:
    path: "{{ _ce_provision_data_dir + '/' + _aws_resource_name }}"
    state: directory

- name: Ensure subnet file exists.
  ansible.builtin.file:
    path: "{{ _ce_provision_data_dir + '/' + _aws_resource_name + '/ec2-subnet-id' }}"
    state: touch

- name: Try to load subnet from file.
  ansible.builtin.set_fact:
    _aws_ec2_with_eip_vpc_subnet_id: "{{ lookup('file', _ce_provision_data_dir + '/' + _aws_resource_name + '/ec2-subnet-id') }}"

# If we have no stored subnet ID and one has been set in variables this will override whatever might be looked up.
- name: Load defined subnet from variables.
  ansible.builtin.set_fact:
    _aws_ec2_with_eip_vpc_subnet_id: "{{ aws_ec2_with_eip.vpc_subnet_id }}"
  when: (aws_ec2_with_eip.vpc_subnet_id is defined and aws_ec2_with_eip.vpc_subnet_id | length > 0 and _aws_ec2_with_eip_vpc_subnet_id | length == 0)

# If we have no stored subnet ID and vpc_name is defined we'll look up available subnets
- name: Gather VPC information.
  amazon.aws.ec2_vpc_net_info:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    region: "{{ aws_ec2_with_eip.region }}"
    filters:
      "tag:Name": "{{ aws_ec2_with_eip.vpc_name }}"
  when: (aws_ec2_with_eip.vpc_name is defined and aws_ec2_with_eip.vpc_name | length > 0 and _aws_ec2_with_eip_vpc_subnet_id | length == 0)
  register: _aws_ec2_with_eip_vpc

- name: Set the VPC id from name.
  ansible.builtin.set_fact:
    _aws_ec2_with_eip_vpc_id: "{{ _aws_ec2_with_eip_vpc.vpcs[0].vpc_id }}"
  when: (aws_ec2_with_eip.vpc_name is defined and aws_ec2_with_eip.vpc_name | length > 0 and _aws_ec2_with_eip_vpc_subnet_id | length == 0)

- name: Gather public subnet information.
  amazon.aws.ec2_vpc_subnet_info:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    region: "{{ aws_ec2_with_eip.region }}"
    filters:
      vpc-id: "{{ _aws_ec2_with_eip_vpc_id }}"
      tag:Env: "{{ _env_type }}"
      tag:Profile: "{{ aws_ec2_with_eip.vpc_subnet_profile }}"
  when: (aws_ec2_with_eip.vpc_name is defined and aws_ec2_with_eip.vpc_name | length > 0 and _aws_ec2_with_eip_vpc_subnet_id | length == 0)
  register: _aws_ec2_with_eip_subnets

- name: Pick a subnet at random.
  ansible.builtin.set_fact:
    _aws_ec2_with_eip_vpc_subnet_id: "{{ item.subnet_id }}"
  with_random_choice: "{{ _aws_ec2_with_eip_subnets.subnets }}"
  when: (aws_ec2_with_eip.vpc_name is defined and aws_ec2_with_eip.vpc_name | length > 0 and _aws_ec2_with_eip_vpc_subnet_id | length == 0)

# Save the subnet ID to file.
- name: Save the subnet ID in the data directory.
  ansible.builtin.template:
    src: ec2-subnet-id.j2
    dest: "{{ _ce_provision_data_dir + '/' + _aws_resource_name + '/ec2-subnet-id' }}"
    force: true

# Convert security group names to IDs for consistency.
- name: Generate security group information.
  ansible.builtin.include_role:
    name: aws/aws_security_groups
  vars:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    region: "{{ aws_ec2_with_eip.region }}"
    group_names: "{{ aws_ec2_with_eip.security_groups }}"
    return_type: ids
  when: aws_ec2_with_eip.security_groups | length > 0

# Do not create an instance if _aws_hostname is not an EC2 generated address unless `force: true`
- name: Create new EC2 instance.
  amazon.aws.ec2_instance:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    key_name: "{{ aws_ec2_with_eip.key_name }}"
    instance_type: "{{ aws_ec2_with_eip.instance_type }}"
    instance_role: "{{ _aws_ec2_with_eip_iam_role_info.iam_roles[0].instance_profiles[0].arn }}"
    region: "{{ aws_ec2_with_eip.region }}"
    image_id: "{{ _aws_ec2_with_eip_image_latest.image_id }}"
    state: "{{ aws_ec2_with_eip.state }}"
    wait: true
    termination_protection: "{{ aws_ec2_with_eip.termination_protection }}"
    vpc_subnet_id: "{{ _aws_ec2_with_eip_vpc_subnet_id }}"
    name: "{{ aws_ec2_with_eip.instance_name }}"
    tags: "{{ aws_ec2_with_eip.tags }}"
    security_groups: "{{ _aws_security_group_list }}" # variable populated by the aws_security_groups role
    ebs_optimized: "{{ aws_ec2_with_eip.ebs_optimized }}"
    volumes:
      - device_name: /dev/xvda
        ebs:
          volume_size: "{{ aws_ec2_with_eip.root_volume_size }}"
          delete_on_termination: "{{ aws_ec2_with_eip.root_volume_delete_on_termination }}"
          volume_type: "{{ aws_ec2_with_eip.root_volume_type }}"
          encrypted: "{{ aws_ec2_with_eip.root_volume_encrypted }}"
  register: _aws_ec2_with_eip_instances
  when: (_aws_hostname | length == 0) or (_aws_hostname == aws_ec2_with_eip.hostname) or aws_ec2_with_eip.force

# This task deliberately omits `image_id` so it cannot create a new instance, only refresh the state of an existing one.
- name: Refresh EC2 instance.
  amazon.aws.ec2_instance:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    key_name: "{{ aws_ec2_with_eip.key_name }}"
    instance_type: "{{ aws_ec2_with_eip.instance_type }}"
    instance_role: "{{ _aws_ec2_with_eip_iam_role_info.iam_roles[0].instance_profiles[0].arn }}"
    region: "{{ aws_ec2_with_eip.region }}"
    state: "{{ aws_ec2_with_eip.state }}"
    wait: true
    termination_protection: "{{ aws_ec2_with_eip.termination_protection }}"
    vpc_subnet_id: "{{ _aws_ec2_with_eip_vpc_subnet_id }}"
    name: "{{ aws_ec2_with_eip.instance_name }}"
    tags: "{{ aws_ec2_with_eip.tags }}"
    security_groups: "{{ _aws_security_group_list }}" # variable populated by the aws_security_groups role
    ebs_optimized: "{{ aws_ec2_with_eip.ebs_optimized }}"
    volumes:
      - device_name: /dev/xvda
        ebs:
          volume_size: "{{ aws_ec2_with_eip.root_volume_size }}"
          delete_on_termination: "{{ aws_ec2_with_eip.root_volume_delete_on_termination }}"
          volume_type: "{{ aws_ec2_with_eip.root_volume_type }}"
          encrypted: "{{ aws_ec2_with_eip.root_volume_encrypted }}"
  register: _aws_ec2_with_eip_instances
  when: (_aws_hostname | length > 0) or (_aws_hostname != aws_ec2_with_eip.hostname) or not aws_ec2_with_eip.force

- name: Check if we have an existing EIP.
  amazon.aws.ec2_eip_info:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    region: "{{ aws_ec2_with_eip.region }}"
    filters:
      tag:Name: "{{ aws_ec2_with_eip.instance_name }}"
  register: _aws_ec2_with_eip_instances_eip

- name: Generate Terraform template.
  ansible.builtin.template:
    src: eip.tf.j2
    dest: "{{ _ce_provision_build_tmp_dir }}/main.tf"
    mode: "0666"
  when: not _aws_ec2_with_eip_instances_eip.addresses

- name: Init Terraform.
  ansible.builtin.command:
    cmd: terraform init
    chdir: "{{ _ce_provision_build_tmp_dir }}"
  when: not _aws_ec2_with_eip_instances_eip.addresses

- name: Create EIP with Terraform if we don't have one.
  ansible.builtin.command:
    cmd: terraform apply -auto-approve
    chdir: "{{ _ce_provision_build_tmp_dir }}"
  when: not _aws_ec2_with_eip_instances_eip.addresses

- name: Re-register EIP.
  amazon.aws.ec2_eip_info:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    region: "{{ aws_ec2_with_eip.region }}"
    filters:
      tag:Name: "{{ aws_ec2_with_eip.instance_name }}"
  register: _aws_ec2_with_eip_instances_eip

- name: Associate Elastic IP.
  amazon.aws.ec2_eip:
    profile: "{{ aws_ec2_with_eip.aws_profile }}"
    region: "{{ aws_ec2_with_eip.region }}"
    device_id: "{{ _aws_ec2_with_eip_instances.instance_ids[0] }}"
    public_ip: "{{ _aws_ec2_with_eip_instances_eip.addresses[0].public_ip }}"
    private_ip_address: "{{ _aws_ec2_with_eip_instances.instances[0].private_ip_address }}"
    in_vpc: true
    tag_name: Name
    tag_value: "{{ aws_ec2_with_eip.instance_name }}"

- name: Add a DNS record in route 53
  amazon.aws.route53:
    state: "{{ aws_ec2_with_eip.route_53.state }}"
    profile: "{{ aws_ec2_with_eip.route_53.aws_profile }}"
    zone: "{{ aws_ec2_with_eip.route_53.zone }}"
    record: "{{ aws_ec2_with_eip.route_53.record }}"
    type: A
    value: "{{ _aws_ec2_with_eip_instances_eip.addresses[0].public_ip }}"
    overwrite: true
  when:
    - aws_ec2_with_eip.route_53.zone is defined
    - aws_ec2_with_eip.route_53.zone | length > 0

- name: Add a matching wildcard DNS record
  amazon.aws.route53:
    state: "{{ aws_ec2_with_eip.route_53.state }}"
    profile: "{{ aws_ec2_with_eip.route_53.aws_profile }}"
    zone: "{{ aws_ec2_with_eip.route_53.zone }}"
    record: "*.{{ aws_ec2_with_eip.route_53.record }}"
    type: CNAME
    value: "{{ aws_ec2_with_eip.route_53.record }}"
    overwrite: true
  when:
    - aws_ec2_with_eip.route_53.zone is defined
    - aws_ec2_with_eip.route_53.zone | length > 0
    - aws_ec2_with_eip.route_53.wildcard is defined
    - aws_ec2_with_eip.route_53.wildcard

- name: Create EC2 autorecovery alarm.
  ansible.builtin.include_role:
    name: aws/aws_ec2_metric_alarm
  vars:
    aws_ec2_metric_alarm:
      aws_profile: "{{ aws_ec2_with_eip.aws_profile }}"
      region: "{{ aws_ec2_with_eip.region }}"
      name: "{{ aws_ec2_with_eip.instance_name }}_auto_recovery"
      description: "This metric auto recovers EC2 instances"
      metric: "StatusCheckFailed_System"
      namespace: "AWS/EC2"
      statistic: "Maximum"
      comparison: "GreaterThanOrEqualToThreshold"
      threshold: 1
      unit: "Count"
      period: 60
      evaluation_periods: 2
      alarm_actions: ["arn:aws:automate:{{ aws_ec2_with_eip.region }}:ec2:recover"]
      dimensions: { "InstanceId": "{{ _aws_ec2_with_eip_instances.instances[0].instance_id }}" }
  when:
    - aws_ec2_with_eip.autorecover

- name: Assign resource to backup plan.
  ansible.builtin.include_role:
    name: aws/aws_backup
    tasks_from: resource
  vars:
    backup:
      backup_plan_name: "{{ aws_ec2_with_eip.backup }}"
      selection_name: "EC2-{{ aws_ec2_with_eip.instance_name }}-{{ _env_type }}"
      resource_id: "{{ _aws_ec2_with_eip_instances.instances[0].instance_id }}"
      resource_type: "instance"
  when:
    - aws_ec2_with_eip.backup is defined
    - aws_ec2_with_eip.backup | length > 0
