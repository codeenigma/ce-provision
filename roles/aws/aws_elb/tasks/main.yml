---

- name: Gather VPC information.
  amazon.aws.ec2_vpc_net_info:
    profile: "{{ aws_elb.aws_profile }}"
    region: "{{ aws_elb.region }}"
    filters:
      "tag:Name": "{{ aws_elb.vpc_name }}"
  register: _aws_ec2_elb_vpc
  when: ( aws_elb.vpc_name is defined and aws_elb.vpc_name | length > 0 )

- name: Set the VPC id from name.
  ansible.builtin.set_fact:
    _aws_ec2_elb_vpc_id: "{{ _aws_ec2_elb_vpc.vpcs[0].vpc_id }}"
  when: ( aws_elb.vpc_name is defined and aws_elb.vpc_name | length > 0 )

- name: Use provided VPC id.
  ansible.builtin.set_fact:
    _aws_ec2_elb_vpc_id: "{{ aws_elb.vpc_id }}"
  when: ( aws_elb.vpc_name is not defined or aws_elb.vpc_name | length < 0 )

- name: Reset subnets lists.
  ansible.builtin.set_fact:
    _aws_ec2_elb_public_subnets_ids: []

- name: Construct list of public subnet IDs.
  ansible.builtin.include_tasks: subnet.yml
  with_items: "{{ aws_elb.subnets }}"
  loop_control:
    loop_var: subnet

- name: Create target groups.
  ansible.builtin.include_tasks: "target_group.yml"
  with_items: "{{ aws_elb.target_groups }}"
  loop_control:
    loop_var: target_group
  when:
    - aws_elb.target_groups is defined
    - aws_elb.target_groups | length > 0

- name: Create SSL certificate.
  ansible.builtin.include_role:
    name: aws/aws_acm
  vars:
    aws_acm:
      export: false
      domain_name: "{{ aws_elb.route_53.record }}" # use the same value as we create the DNS record with later
      extra_domains: "{{ aws_elb.acm.extra_domains }}"
      route_53:
        aws_profile: "{{ aws_elb.acm.route_53.aws_profile }}"
        zone: "{{ aws_elb.acm.route_53.zone }}"
  when: aws_elb.acm.create_cert

- name: Default to provided SSL certificate ARN.
  ansible.builtin.set_fact:
    _ssl_certificate_ARN: "{{ aws_elb.ssl_certificate_ARN }}"

- name: If provided, override SSL certificate ARN with the one received from ACM.
  ansible.builtin.set_fact:
    _ssl_certificate_ARN: "{{ aws_acm_certificate_arn }}"
  when: aws_elb.acm.create_cert

- name: Define default ALB listeners.
  ansible.builtin.set_fact:
    _aws_ec2_listeners_http:
      Protocol: HTTP
      Port: "80"
      DefaultActions:
        - Type: forward
          TargetGroupName: "{{ aws_elb.listeners_http.default_target_group }}"
      Rules: "{{ aws_elb.listeners_http.rules }}"
    _aws_ec2_listeners_redirect:
      Protocol: HTTP
      Port: "80"
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Host: "#{host}"
            Query: "#{query}"
            Path: "/#{path}"
            Port: "443"
            StatusCode: HTTP_301
    _aws_ec2_listeners_https:
      Protocol: HTTPS
      Port: "443"
      SslPolicy: "{{ aws_elb.elb_ssl_policy }}"
      Certificates:
        - CertificateArn: "{{ _ssl_certificate_ARN }}"
      DefaultActions:
        - Type: forward
          TargetGroupName: "{{ aws_elb.listeners_https.default_target_group }}"
      Rules: "{{ aws_elb.listeners_https.rules }}"

- name: Add HTTP listeners.
  ansible.builtin.set_fact:
    _aws_ec2_listeners: "{{ [ _aws_ec2_listeners_http ] }}"
  when: _ssl_certificate_ARN | length < 1

- name: Add HTTPS Listener.
  ansible.builtin.set_fact:
    _aws_ec2_listeners: "{{ [ _aws_ec2_listeners_redirect, _aws_ec2_listeners_https ] }}"
  when: _ssl_certificate_ARN | length > 1

- name: Add custom Listeners.
  ansible.builtin.set_fact:
    _aws_ec2_listeners: "{{ _aws_ec2_listeners + aws_elb.listeners }}"
  when:
    - aws_elb is defined
    - aws_elb | length

- name: Generate security group information.
  ansible.builtin.include_role:
    name: aws/aws_security_groups
  vars:
    aws_security_groups:
      profile: "{{ aws_elb.aws_profile }}"
      region: "{{ aws_elb.region }}"
      group_names: "{{ aws_elb.elb_security_groups }}"
      return_type: ids
  when: aws_elb.elb_security_groups | length > 0

- name: Create the ALB.
  amazon.aws.elb_application_lb:
    name: "{{ aws_elb.name }}"
    profile: "{{ aws_elb.aws_profile }}"
    region: "{{ aws_elb.region }}"
    state: "{{ aws_elb.state }}"
    tags: "{{ aws_elb.tags }}"
    subnets: "{{ _aws_ec2_elb_public_subnets_ids }}"
    security_groups: "{{ _aws_security_group_list }}" # accepts names or IDs, variable populated by the aws_security_groups role
    listeners: "{{ _aws_ec2_listeners }}"
    idle_timeout: "{{ aws_elb.idle_timeout }}"
    ip_address_type: "{{ aws_elb.ip_address_type }}"
  register: _aws_ec2_elb
  when: aws_elb.elb_type == "alb"

- name: Get ALB listener ARN for port 443.
  ansible.builtin.set_fact:
    _aws_ec2_elb_listener_ARN: "{{ item.listener_arn }}"
  when:
    - item.port == 443
    - aws_elb.ssl_extra_certificate_ARNs
    - _ssl_certificate_ARN | length > 1
  with_items: "{{ _aws_ec2_elb.listeners }}"

- name: Add extra SSL certificates to the ALB.
  ansible.builtin.command:
    cmd: "aws elbv2 add-listener-certificates --region {{ aws_elb.region }} --profile {{ aws_elb.aws_profile }} --listener-arn {{ _aws_ec2_elb_listener_ARN }} --certificates CertificateArn={{ item }}"
  when:
    - aws_elb.ssl_extra_certificate_ARNs
    - _ssl_certificate_ARN | length > 1
  with_items: "{{ aws_elb.ssl_extra_certificate_ARNs }}"
