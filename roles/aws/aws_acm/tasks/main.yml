---
- name: Run aws acm list-certificates.
  ansible.builtin.command: "aws --profile {{ aws_acm.aws_profile }} --region {{ aws_acm.region }} acm list-certificates"
  register: _aws_acm_cert_list

- ansible.builtin.fail:
    msg: "Domain name is undefined"
  when: aws_acm.domain_name is undefined
- ansible.builtin.fail:
    msg: "Route 53 zone is undefined"
  when: aws_acm.route_53.zone is undefined

- name: Replace JSON output with parsed results.
  ansible.builtin.set_fact:
    _aws_acm_cert_list: "{{ _aws_acm_cert_list.stdout | from_json }}"

- name: Refine to the summary list of current certificates.
  ansible.builtin.set_fact:
    _aws_acm_cert_list: "{{ _aws_acm_cert_list.CertificateSummaryList | to_json }}"

- name: Explicitly initialise existing cert vars.
  ansible.builtin.set_fact:
    aws_acm_certificate_arn: ""
    _aws_acm_domain_in_cert_list: false

- name: Iterate through the certificate list checking for domain.
  ansible.builtin.set_fact:
    aws_acm_certificate_arn: "{{ item.CertificateArn }}"
    _aws_acm_domain_in_cert_list: true
  when: item.DomainName == aws_acm.domain_name
  with_items: "{{ _aws_acm_cert_list }}"

- ansible.builtin.set_fact:
    _aws_tags_list: []
    _aws_tags_string: ""

- name: Build list of tags as Key,Value strings.
  ansible.builtin.set_fact:
    _aws_tags_list: "{{ _aws_tags_list + ['Key=' + item.key + ',' + 'Value=' + item.value] }}"
  loop: "{{ aws_acm.tags | dict2items }}"
  when: aws_acm.tags | length > 0

- name: Turn tag list into space separated string.
  ansible.builtin.set_fact:
    _aws_tags_string: "{{ _aws_tags_list | join(' ') }}"
  when: aws_acm.tags | length > 0

# Note: an ACM certificate that is in Status:pending will be included in the list of certificates outputted by 'aws acm request-certificate'
- name: Send simple ACM request if needed.
  ansible.builtin.command: |
    aws --profile "{{ aws_acm.aws_profile }}" --region "{{ aws_acm.region }}" \
    acm request-certificate \
    --domain-name "{{ aws_acm.domain_name }}" \
    --validation-method DNS \
    --tags {{ _aws_tags_string }}
  register: _aws_acm_new_certificate
  when:
    - not _aws_acm_domain_in_cert_list
    - not aws_acm.extra_domains | length > 0

- ansible.builtin.set_fact:
    _acm_san_domains: []
  when: aws_acm.extra_domains | length > 0

- name: Build a list of additional domains.
  ansible.builtin.set_fact:
    _acm_san_domains: "{{ _acm_san_domains + [item.domain] }}"
  loop: "{{ aws_acm.extra_domains }}"
  when: aws_acm.extra_domains | length > 0

- name: Send ACM request for a SAN cert if needed.
  ansible.builtin.command: |
    aws --profile "{{ aws_acm.aws_profile }}" --region "{{ aws_acm.region }}" \
    acm request-certificate \
    --domain-name "{{ aws_acm.domain_name }}" \
    --subject-alternative-names {{ _acm_san_domains | join(' ') }} \
    --validation-method DNS \
    --tags {{ _aws_tags_string }}
  register: _aws_acm_new_san_certificate
  when:
    - not _aws_acm_domain_in_cert_list
    - aws_acm.extra_domains | length > 0

- name: Parse returned certificate simple certificate output.
  ansible.builtin.set_fact:
    _aws_acm_new_certificate: "{{ _aws_acm_new_certificate.stdout | from_json }}"
  when:
    - not _aws_acm_domain_in_cert_list
    - not aws_acm.extra_domains | length > 0

- name: Parse returned SAN certificate output.
  ansible.builtin.set_fact:
    _aws_acm_new_certificate: "{{ _aws_acm_new_san_certificate.stdout | from_json }}"
  when:
    - not _aws_acm_domain_in_cert_list
    - aws_acm.extra_domains | length > 0

- name: Fetch the new certificate's ARN.
  ansible.builtin.set_fact:
    aws_acm_certificate_arn: "{{ _aws_acm_new_certificate.CertificateArn }}"
  when: not _aws_acm_domain_in_cert_list

# Not currently possible to do this with the API, so we just pause 5 seconds - this is usually enough time.
- name: Wait until the new certificate is properly issued.
  ansible.builtin.pause:
    seconds: 5
  when:
    - not _aws_acm_domain_in_cert_list
    - aws_acm.validate

- name: Obtain all information for a the new ACM certificate.
  community.aws.acm_certificate_info:
    region: "{{ aws_acm.region }}"
    profile: "{{ aws_acm.aws_profile }}"
    domain_name: "{{ aws_acm.domain_name }}"
  register: _aws_acm_new_certificate
  when:
    - not _aws_acm_domain_in_cert_list
    - aws_acm.validate

- name: Initialise the DNS loop var with main domain entry DNS settings.
  ansible.builtin.set_fact:
    _acm_dns_all_domains:
      - domain: "{{ aws_acm.domain_name }}"
        zone: "{{ aws_acm.route_53.zone }}"
        aws_profile: "{{ aws_acm.route_53.aws_profile }}"
  when:
    - aws_acm.route_53.zone is defined
    - aws_acm.route_53.zone | length > 0
    - not _aws_acm_domain_in_cert_list
    - aws_acm.validate

- name: Add extra_domains so we can loop through DNS records.
  ansible.builtin.set_fact:
    _acm_dns_all_domains: "{{ _acm_dns_all_domains + [{'domain': item.domain, 'zone': item.zone, 'aws_profile': item.aws_profile}] }}"
  loop: "{{ aws_acm.extra_domains }}"
  when:
    - aws_acm.extra_domains | length > 0
    - not _aws_acm_domain_in_cert_list
    - aws_acm.validate

- name: Add a DNS records in Route 53 for validation.
  amazon.aws.route53:
    state: present
    profile: "{{ item.aws_profile }}"
    zone: "{{ item.zone }}"
    record: "{{ (_aws_acm_new_certificate.certificates[0].domain_validation_options | selectattr('domain_name', 'search', item.domain))[0].resource_record.name }}"
    type: CNAME
    value: "{{ (_aws_acm_new_certificate.certificates[0].domain_validation_options | selectattr('domain_name', 'search', item.domain))[0].resource_record.value }}"
    overwrite: true
  loop: "{{ _acm_dns_all_domains }}"
  when:
    - aws_acm.route_53.zone is defined
    - aws_acm.route_53.zone | length > 0
    - not _aws_acm_domain_in_cert_list
    - aws_acm.validate

- name: Wait for ACM certificate validation to complete.
  ansible.builtin.command: |
    aws --profile "{{ aws_acm.aws_profile }}" --region "{{ aws_acm.region }}" \
    acm wait certificate-validated \
    --certificate-arn "{{ aws_acm_certificate_arn }}"
  when:
    - not _aws_acm_domain_in_cert_list
    - aws_acm.validate

# Even though we wait for validation, it's still too quick.
- name: Wait to allow status cache time to update.
  ansible.builtin.pause:
    seconds: 5
  when:
    - not _aws_acm_domain_in_cert_list
    - aws_acm.export
    - aws_acm.validate

- name: Fetch certificate for later use.
  ansible.builtin.command: |
    aws --profile "{{ aws_acm.aws_profile }}" --region "{{ aws_acm.region }}" \
    acm get-certificate \
    --certificate-arn "{{ aws_acm_certificate_arn }}"
  register: _aws_acm_exported_certificate_json
  when:
    - not _aws_acm_domain_in_cert_list
    - aws_acm.export
    - aws_acm.validate

- name: Replace JSON certificate output with parsed results.
  ansible.builtin.set_fact:
    aws_acm_exported_certificate: "{{ _aws_acm_exported_certificate_json.stdout | from_json }}"
  when:
    - not _aws_acm_domain_in_cert_list
    - aws_acm.export
    - aws_acm.validate
