---
- name: Get backup plan info.
  ansible.builtin.command: >
    aws backup list-backup-plans --region {{ _aws_region }} --query "BackupPlansList[?BackupPlanName=='{{ backup.backup_plan_name }}'] | [0]" --output json
  register: _backup_plan_info

- name: Get restore testing plan info.
  ansible.builtin.command: >
    aws backup list-restore-testing-plans --region {{ _aws_region }} --query "RestoreTestingPlans[?RestoreTestingPlanName=='{{ backup.backup_plan_name | replace("-", "_") }}'] | [0]" --output json
  register: _testing_plan_info

- name: Gather AWS account ID if it isn't already set.
  amazon.aws.aws_caller_info:
    profile: "{{ _aws_profile }}"
  delegate_to: localhost
  register: caller_info
 # when: caller_info is not defined

- name: Create IAM role for backups.
  ansible.builtin.include_role:
    name: aws/aws_iam_role
  vars:
    aws_iam_role:
      aws_profile: "{{ _aws_profile }}"
      region: "{{ _aws_region }}"
      state: present
      tags:
        Ansible: managed
        Infra: "{{ _infra_name }}"
        Billing: "{{ _aws_billing_type }}"
        Env: "{{ _env_type }}"
      name: "{{ _infra_name }}-backup"
      managed_policies:
        - "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"
        - "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores"
      policy_document: backup
  when: aws_backup.backup.iam_role_arn == "Default"

- name: Set IAM role ARN for backups.
  ansible.builtin.set_fact:
    _iam_role_arn: "{{ _aws_iam_role_result.iam_role.arn }}"
  when: aws_backup.backup.iam_role_arn == "Default"

- name: Set IAM role ARN for backups.
  ansible.builtin.set_fact:
    _iam_role_arn: "{{ aws_backup.backup.iam_role_arn }}"
  when: aws_backup.backup.iam_role_arn != "Default"

- name: Construct AWS ARN for the resource.
  vars:
    arn_construct:
      instance: "ec2"
      file-system: "elasticfilesystem"
      db: "rds"
  ansible.builtin.set_fact:
    _resource_arn: "arn:aws:{{ arn_construct[backup.resource_type] }}:{{ _aws_region }}:{{ caller_info.account }}:{{ backup.resource_type }}{% if backup.resource_type == 'db' %}:{% else %}/{% endif %}{{ backup.resource_id }}"

- name: Check if the resource selection exists.
  ansible.builtin.command: >
    aws backup list-backup-selections --backup-plan-id {{ _backup_plan_info.stdout | from_json | json_query('BackupPlanId') }} --query "BackupSelectionsList[?SelectionName=='{{ backup.selection_name }}'].SelectionName" --output text --region {{ _aws_region }}
  register: _selection_exists

- name: Assign resource to AWS Backup plan.
  ansible.builtin.command: >
    aws backup create-backup-selection --backup-plan-id {{ _backup_plan_info.stdout | from_json | json_query('BackupPlanId') }} --backup-selection "{\"SelectionName\":\"{{ backup.selection_name }}\",\"IamRoleArn\":\"{{ _iam_role_arn }}\",\"Resources\":[\"{{ _resource_arn }}\"]}" --region {{ _aws_region }}
  when: _selection_exists.stdout | length == 0

- name: Check if the restore testing selection exists.
  ansible.builtin.command: >
    aws backup list-restore-testing-selections --restore-testing-plan-name {{ _testing_plan_info.stdout | from_json | json_query('RestoreTestingPlanName') }} --query "RestoreTestingSelections[?RestoreTestingSelectionName=='{{ backup.selection_name | replace('-', '_') }}'].RestoreTestingSelectionName" --output text --region {{ _aws_region }}
  register: _testing_selection_exists
  when: _testing_plan_info.stdout != "null"

- name: Assign resource to AWS restore testing plan.
  ansible.builtin.command: >
    aws backup create-restore-testing-selection --restore-testing-plan-name {{ _testing_plan_info.stdout | from_json | json_query('RestoreTestingPlanName') }} --restore-testing-selection "{\"RestoreTestingSelectionName\":\"{{ backup.selection_name | replace('-', '_') }}\",\"IamRoleArn\":\"{{ _iam_role_arn }}\",\"ProtectedResourceArns\":[\"{{ _resource_arn }}\"],\"ProtectedResourceType\":\"{{ backup.selection_name.split('-')[0] }}\",\"ValidationWindowHours\":1}" --region {{ _aws_region }}
  when: _testing_plan_info.stdout != "null" and _testing_selection_exists.stdout | length == 0
