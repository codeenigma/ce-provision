---
- name: Generate security group information.
  ansible.builtin.include_role:
    name: aws/aws_security_groups
  vars:
    profile: "{{ aws_efs.aws_profile }}"
    region: "{{ aws_efs.region }}"
    group_names: "{{ aws_efs.security_groups }}"
    return_type: ids
  when: aws_efs.security_groups | length > 0

- name: Reset subnet ids info
  ansible.builtin.set_fact:
    _aws_efs_subnets_ids: []

- name: Reset targets info
  ansible.builtin.set_fact:
    _aws_efs_targets: {}

- name: Gather subnets info.
  ansible.builtin.include_tasks: subnet.yml
  with_items: "{{ aws_efs.subnets }}"
  loop_control:
    loop_var: subnet

- name: Construct target list.
  ansible.builtin.include_tasks: target.yml
  with_items: "{{ _aws_efs_subnets_ids }}"
  loop_control:
    loop_var: target

- name: Create EFS volume
  community.aws.efs:
    profile: "{{ aws_efs.aws_profile }}"
    name: "{{ aws_efs.name }}"
    region: "{{ aws_efs.region }}"
    state: "{{ aws_efs.state }}"
    tags: "{{ aws_efs.tags }}"
    purge_tags: "{{ aws_efs.purge_tags }}"
    targets: "{{ _aws_efs_targets.values() | list }}"
    encrypt: "{{ aws_efs.encrypt }}"
  register: aws_efs_created

- name: Assign resource to backup plan.
  ansible.builtin.include_role:
    name: aws/aws_backup
    tasks_from: resource
  vars:
    backup:
      backup_plan_name: "{{ aws_efs.backup }}"
      selection_name: "EFS-{{ aws_efs.name }}-{{ _env_type }}"
      resource_id: "{{ aws_efs_created.efs.file_system_id }}"
      resource_type: "file-system"
  when:
    - aws_efs.backup is defined
    - aws_efs.backup | length > 0