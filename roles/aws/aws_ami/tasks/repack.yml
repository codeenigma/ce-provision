---
- name: Gather running instances information.
  amazon.aws.ec2_instance_info:
    profile: "{{ aws_ami.aws_profile }}"
    region: "{{ aws_ami.region }}"
    filters:
      "tag:Name": "{{ aws_ami.cluster_name }}"
      instance-state-name: ["running"]
  register: aws_ami_running_instances

- name: Create a Security Group to access the controller.
  amazon.aws.ec2_group:
    profile: "{{ aws_ami.aws_profile }}"
    region: "{{ aws_ami.region }}"
    name: "{{ aws_ami.cluster_name }}-repacker"
    tags: "{{ aws_ami.tags }}"
    state: present
    vpc_id: "{{ aws_ami.vpc_id }}"
    description: "Allow controller to access the {{ aws_ami.ami_name }}-repacking instance"
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: "{{ aws_ami.repack_controller_cidr }}"
        rule_desc: "Allow controller to access the {{ aws_ami.ami_name }}-repacking instance"

- name: Create an AMI with this EC2 instance.
  amazon.aws.ec2_ami:
    profile: "{{ aws_ami.aws_profile }}"
    region: "{{ aws_ami.region }}"
    instance_id: "{{ aws_ami_running_instances.instances[0].instance_id }}"
    wait: true
    name: "{{ aws_ami.ami_name }}"
    tags: "{{ aws_ami.tags }}"
  register: _aws_ami_repack_ami
  when: aws_ami_running_instances.instances | length > 0

- name: Create EC2 instance.
  community.aws.ec2_instance: # @TODO: soon to move to amazon.aws collection
    profile: "{{ aws_ami.aws_profile }}"
    key_name: "{{ aws_ami.key_name }}"
    instance_type: t3.micro
    instance_role: "{{ aws_ami.repack_iam_role }}"
    region: "{{ aws_ami.region }}"
    image_id: "{{ _aws_ami_repack_ami.image_id }}"
    state: running
    wait: true
    termination_protection: false
    vpc_subnet_id: "{{ aws_ami.vpc_subnet_id }}"
    name: "{{ aws_ami.ami_name }}-repacking"
    tags: "{{ aws_ami.tags }}"
    security_groups:
      - "{{ aws_ami.cluster_name }}-repacker"
    ebs_optimized: true
    network:
      assign_public_ip: true
    volumes:
      - device_name: /dev/xvda
        ebs:
          volume_size: 40
          delete_on_termination: true
          volume_type: gp2
          encrypted: "{{ aws_ami.encrypt_boot }}"
  register: _aws_ami_ec2_instances
  when: aws_ami_running_instances.instances | length > 0

- name: Save the temporary EC2 instance DNS as the host to delegate tasks to.
  ansible.builtin.set_fact:
    _aws_ami_host: "{{ _aws_ami_ec2_instances.instances[0].public_dns_name }}" # Public DNS of new machine
  when: aws_ami_running_instances.instances | length > 0

- name: Run provisioning tasks over temporary EC2 instance.
  ansible.builtin.command:
    cmd: "{{ ce_provision.local_dir }}/ce-provision/scripts/provision.sh --repo {{ _infra_name }} --workspace {{ _ce_provision_build_dir }} --branch {{ target_branch }} --playbook {{ aws_ami.playbook_file }} --own-branch {{ ce_provision.own_repository_branch }} --config-branch {{ ce_provision.config_repository_branch }} --boto-profile {{ _aws_profile }} --force --absolute-playbook-path --ansible-extra-vars '{_aws_region: {{ _aws_region }}, _env_type: {{ _env_type }}, _aws_resource_name: {{ _aws_resource_name }}, _aws_ami_host: {{ _aws_ami_host }}}'"
  become: true
  become_user: controller
  when: aws_ami_running_instances.instances | length > 0

- name: Update the AMI with the temporary EC2 instance image.
  amazon.aws.ec2_ami:
    profile: "{{ aws_ami.aws_profile }}"
    region: "{{ aws_ami.region }}"
    instance_id: "{{ _aws_ami_ec2_instances.instances[0].instance_id }}"
    wait: true
    name: "{{ aws_ami.ami_name }}"
    tags: "{{ aws_ami.tags }}"
  when: aws_ami_running_instances.instances | length > 0

- name: Terminate the temporary EC2 instance to provision against.
  community.aws.ec2_instance: # @TODO: soon to move to amazon.aws collection
    profile: "{{ aws_ami.aws_profile }}"
    region: "{{ aws_ami.region }}"
    state: absent
    instance_ids:
      - "{{ _aws_ami_ec2_instances.instances[0].instance_id }}"
  when: aws_ami_running_instances.instances | length > 0
