# @todo Do we still need that? Used by AMI and LC,
# but probably could simply use the base name.
- name: Define unique name for resources.
  set_fact:
    _aws_ec2_autoscale_cluster_unique_name: "{{ aws_ec2_autoscale_cluster.name }}-{{ ansible_date_time.iso8601_basic_short }}"

- name: Gather VPC information.
  ec2_vpc_net_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    filters:
      "tag:Name": "{{ aws_ec2_autoscale_cluster.vpc_name }}"
  register: _aws_ec2_autoscale_cluster_vpc
  when: ( aws_ec2_autoscale_cluster.vpc_name is defined and aws_ec2_autoscale_cluster.vpc_name | length > 0 )

- name: Set the VPC id from name.
  set_fact:
    _aws_ec2_autoscale_cluster_vpc_id: "{{ _aws_ec2_autoscale_cluster_vpc.vpcs[0].vpc_id }}"
  when: ( aws_ec2_autoscale_cluster.vpc_name is defined and aws_ec2_autoscale_cluster.vpc_name | length > 0 )

- name: Use provided VPC id.
  set_fact:
    _aws_ec2_autoscale_cluster_vpc_id: "{{ aws_ec2_autoscale_cluster.vpc_id }}"
  when: ( aws_ec2_autoscale_cluster.vpc_name is not defined or aws_ec2_autoscale_cluster.vpc_name | length < 0 )

- name: Create matching Security Group.
  ec2_group:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags | combine( { 'Name': aws_ec2_autoscale_cluster.name } ) }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    vpc_id: "{{ _aws_ec2_autoscale_cluster_vpc_id }}"
    description: "Allow internal traffic for cluster {{ aws_ec2_autoscale_cluster.name }}"
    rules:
      - proto: all
        group_name: "{{ aws_ec2_autoscale_cluster.name }}"
  register: _aws_ec2_autoscale_cluster_security_group

- name: Reset subnets lists.
  set_fact:
    _aws_ec2_autoscale_cluster_subnets_ids: []
    _aws_ec2_autoscale_cluster_public_subnets_ids: []
    _aws_ec2_autoscale_cluster_subnets_names: []

- name: Create private subnets.
  include_tasks: subnet.yml
  with_items: "{{ aws_ec2_autoscale_cluster.subnets }}"
  loop_control:
    loop_var: subnet

- name: Create RDS instance.
  include_role:
    name: aws/aws_rds
  vars:
    aws_rds:
      aws_profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
      region: "{{ aws_ec2_autoscale_cluster.region }}"
      db_instance_class: "{{ aws_ec2_autoscale_cluster.rds.db_instance_class }}"
      subnets: "{{ _aws_ec2_autoscale_cluster_subnets_ids }}"
      name: "{{ aws_ec2_autoscale_cluster.name }}"
      description: "{{ aws_ec2_autoscale_cluster.name }}"
      tags: "{{ aws_ec2_autoscale_cluster.tags }}"
      engine: "{{ aws_ec2_autoscale_cluster.rds.engine }}"
      engine_version: "{{ aws_ec2_autoscale_cluster.rds.engine_version | default(omit) }}"
      allocated_storage: "{{ aws_ec2_autoscale_cluster.rds.allocated_storage }}"
      max_allocated_storage: "{{ aws_ec2_autoscale_cluster.rds.max_allocated_storage }}"
      storage_encrypted: "{{ aws_ec2_autoscale_cluster.rds.storage_encrypted }}"
      master_username: "{{ aws_ec2_autoscale_cluster.rds.master_username }}"
      master_user_password: "{{ aws_ec2_autoscale_cluster.rds.master_user_password }}"
      multi_az: "{{ aws_ec2_autoscale_cluster.rds.multi_az }}"
      security_groups:
        - "{{ _aws_ec2_autoscale_cluster_security_group.group_name }}"
  when:
    - aws_ec2_autoscale_cluster.rds.rds is defined
    - aws_ec2_autoscale_cluster.rds.rds

- name: Create EFS volume.
  include_role:
    name: aws/aws_efs
  vars:
    aws_efs:
      aws_profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
      region: "{{ aws_ec2_autoscale_cluster.region }}"
      subnets: "{{ _aws_ec2_autoscale_cluster_subnets_names }}"
      name: "{{ aws_ec2_autoscale_cluster.name }}"
      tags: "{{ aws_ec2_autoscale_cluster.tags }}"
      encrypt: "{{ aws_ec2_autoscale_cluster.efs_encrypt }}"
      security_groups:
        - "{{ _aws_ec2_autoscale_cluster_security_group.group_name }}"
      purge_tags: true
      wait: false
  when:
    - aws_ec2_autoscale_cluster.efs

# @todo We should be able to simply "register" here and
# get rid of the lookup below?
- name: Create new AMI.
  include_role:
    name: aws/ami_debian_buster
  vars:
    ami_debian_buster:
      aws_profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
      region: "{{ aws_ec2_autoscale_cluster.region }}"
      instance_type: "{{ aws_ec2_autoscale_cluster.instance_type }}"
      ami_name: "{{ _aws_ec2_autoscale_cluster_unique_name }}"
      encrypt_boot: "{{ aws_ec2_autoscale_cluster.encrypt_boot }}"
      playbook_file: "{{ aws_ec2_autoscale_cluster.ami_playbook_file }}"
      operation: create
  when:
    - aws_ec2_autoscale_cluster.ami_refresh

- name: Gather AMI image from name.
  ec2_ami_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    owners: self
    filters:
      name: "{{ aws_ec2_autoscale_cluster.name }}*"
  register: aws_ec2_autoscale_cluster_image

- name: Register latest AMI image.
  set_fact:
    aws_ec2_autoscale_cluster_image_latest: "{{ aws_ec2_autoscale_cluster_image.images | sort(attribute='creation_date') | last }}"

- name: Gather IAM role info.
  community.aws.iam_role_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    name: "{{ aws_ec2_autoscale_cluster.iam_role_name }}"
  register: _aws_ec2_autoscale_cluster_iam_role_info
  when:
    - aws_ec2_autoscale_cluster.asg_refresh

- name: Create Launch Configuration.
  community.aws.ec2_lc:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ _aws_ec2_autoscale_cluster_unique_name }}"
    image_id: "{{ aws_ec2_autoscale_cluster_image_latest.image_id }}"
    key_name: "{{ aws_ec2_autoscale_cluster.key_name }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    vpc_id: "{{ _aws_ec2_autoscale_cluster_vpc.vpcs[0].vpc_id }}"
    security_groups: "{{ aws_ec2_autoscale_cluster.cluster_security_groups + [ _aws_ec2_autoscale_cluster_security_group.group_id ] }}"
    instance_type: "{{ aws_ec2_autoscale_cluster.instance_type }}"
    instance_profile_name: "{{ _aws_ec2_autoscale_cluster_iam_role_info.iam_roles[0].instance_profiles[0].arn }}"
    ebs_optimized: "{{ aws_ec2_autoscale_cluster.ebs_optimized }}"
    volumes:
      - device_name: /dev/xvda
        volume_size: "{{ aws_ec2_autoscale_cluster.root_volume_size }}"
  register: _aws_ec2_lc_created
  when:
    - aws_ec2_autoscale_cluster.asg_refresh

- name: Create a Target group for port 80.
  community.aws.elb_target_group:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags }}"
    protocol: http
    port: 80
    vpc_id: "{{ _aws_ec2_autoscale_cluster_vpc.vpcs[0].vpc_id }}"
    health_check_protocol: "{{ aws_ec2_autoscale_cluster.health_check_protocol }}"
    health_check_path: "{{ aws_ec2_autoscale_cluster.health_check_path }}"
    health_check_port: "{{ aws_ec2_autoscale_cluster.health_check_port }}"
    successful_response_codes: "{{ aws_ec2_autoscale_cluster.health_check_success_codes }}"
    health_check_interval: "{{ aws_ec2_autoscale_cluster.health_check_interval }}"
    health_check_timeout: "{{ aws_ec2_autoscale_cluster.health_check_timeout }}"
    healthy_threshold_count: "{{ aws_ec2_autoscale_cluster.health_check_healthy_count }}"
    unhealthy_threshold_count: "{{ aws_ec2_autoscale_cluster.health_check_unhealthy_count }}"
    modify_targets: false
  register: _aws_ec2_target_group_created
  when:
    - aws_ec2_autoscale_cluster.asg_refresh

- name: Gather running instances information.
  community.aws.ec2_instance_info:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    filters:
      "tag:Name": "{{ aws_ec2_autoscale_cluster.name }}"
      instance-state-name: ["running"]
  register: aws_ec2_autoscale_cluster_running_instances
  when:
    - aws_ec2_autoscale_cluster.asg_refresh

- name: Create AutoScale group and spin up new instances.
  community.aws.ec2_asg:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    launch_config_name: "{{ _aws_ec2_lc_created.name }}"
    health_check_type: "{% if aws_ec2_autoscale_cluster_running_instances.instances | length > 0 %}ELB{% else %}EC2{% endif %}"
    health_check_period: 1200
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    replace_all_instances: true
    wait_for_instances: true
    lc_check: true
    wait_timeout: 3000
    desired_capacity: "{{ aws_ec2_autoscale_cluster.min_size if aws_ec2_autoscale_cluster.desired_capacity == 0  else aws_ec2_autoscale_cluster.desired_capacity }}"
    min_size: "{{ aws_ec2_autoscale_cluster.min_size }}"
    max_size: "{{ aws_ec2_autoscale_cluster.max_size }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags | simpledict2list }}"
    vpc_zone_identifier: "{{ _aws_ec2_autoscale_cluster_subnets_ids }}"
    target_group_arns:
      - "{{ _aws_ec2_target_group_created.target_group_arn }}"
  register: _aws_ec2_asg_created
  when:
    - aws_ec2_autoscale_cluster.asg_refresh

- name: Create step scaling AutoScale policies.
  community.aws.ec2_scaling_policy:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    state: "present"
    name: "{{ item.name }}-{{ item.policy_type }}"
    adjustment_type: "{{ item.adjustment_type }}"
    asg_name: "{{ aws_ec2_autoscale_cluster.name }}"
    scaling_adjustment: "{{ item.adjustment }}"
    min_adjustment_step: "{{ item.adjustment_step }}"
    metric_aggregation: "{{ item.metric_aggregation }}"
    step_adjustments: "{{ item.step_adjustments }}"
  when:
    - aws_ec2_autoscale_cluster.asg_scaling_policies
    - "{{ item.policy_type == 'StepScaling' }}"
  register: _aws_ec2_autoscale_cluster_step_scaling_policies
  with_items: "{{ aws_ec2_autoscale_cluster.asg_scaling_policies }}"

- name: Create simple scaling AutoScale policies.
  community.aws.ec2_scaling_policy:
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    state: "present"
    name: "{{ item.name }}-{{ item.policy_type }}"
    adjustment_type: "{{ item.adjustment_type }}"
    asg_name: "{{ aws_ec2_autoscale_cluster.name }}"
    scaling_adjustment: "{{ item.adjustment }}"
    min_adjustment_step: "{{ item.adjustment_step }}"
    cooldown: "{{ item.cooldown }}"
  when:
    - aws_ec2_autoscale_cluster.asg_scaling_policies
    - "{{ item.policy_type == 'SimpleScaling' }}"
  register: _aws_ec2_autoscale_cluster_simple_scaling_policies
  with_items: "{{ aws_ec2_autoscale_cluster.asg_scaling_policies }}"

- name: Fetch step scaling policies.
  set_fact:
    _aws_ec2_autoscale_cluster_scaling_policies: "{{ _aws_ec2_autoscale_cluster_step_scaling_policies.results }}"
  when:
    - _aws_ec2_autoscale_cluster_step_scaling_policies

- name: Fetch simple scaling policies.
  set_fact:
    _aws_ec2_autoscale_cluster_scaling_policies: "{{ _aws_ec2_autoscale_cluster_scaling_policies + _aws_ec2_autoscale_cluster_simple_scaling_policies.results }}"
  when:
    - _aws_ec2_autoscale_cluster_simple_scaling_policies

- set_fact:
    _aws_ec2_autoscale_cluster_scaling_up_policy_ARN: ""
  when:
    - _aws_ec2_autoscale_cluster_scaling_policies

- set_fact:
    _aws_ec2_autoscale_cluster_scaling_down_policy_ARN: ""
  when:
    - _aws_ec2_autoscale_cluster_scaling_policies

# @todo We should support multiple policies. If this built a list
# then we could potentially loop over it after.
- name: Set scaling up policy ARN.
  set_fact:
    _aws_ec2_autoscale_cluster_scaling_up_policy_ARN: "{{ item.arn }}"
  loop: "{{ _aws_ec2_autoscale_cluster_scaling_policies }}"
  when:
    - _aws_ec2_autoscale_cluster_scaling_policies
    - item.item.name == aws_ec2_autoscale_cluster.asg_cloudwatch_policy_scale_up_name
    - item.arn is defined

# @todo As above.
- name: Set scaling down policy ARN.
  set_fact:
    _aws_ec2_autoscale_cluster_scaling_down_policy_ARN: "{{ item.arn }}"
  loop: "{{ _aws_ec2_autoscale_cluster_scaling_policies }}"
  when:
    - _aws_ec2_autoscale_cluster_scaling_policies
    - item.item.name == aws_ec2_autoscale_cluster.asg_cloudwatch_policy_scale_down_name
    - item.arn is defined

- name: Create alarm in CloudWatch for auto scaling up.
  include_role:
    name: aws/aws_ec2_metric_alarm
  vars:
    aws_ec2_metric_alarm:
      aws_profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
      region: "{{ aws_ec2_autoscale_cluster.region }}"
      name: "{{ aws_ec2_autoscale_cluster.asg_cloudwatch_alarm_scale_up_name }}"
      description: "{{ item.description }}"
      metric: "{{ item.metric }}"
      namespace: "{{ item.namespace }}"
      statistic: "{{ item.statistic }}"
      comparison: "{{ item.comparison }}"
      threshold: "{{ item.threshold }}"
      unit: "{{ item.unit }}"
      period: "{{ item.period }}"
      evaluation_periods: "{{ item.evaluation_periods }}"
      alarm_actions:
        - "{{ _aws_ec2_autoscale_cluster_scaling_up_policy_ARN }}"
      dimensions:
        "AutoScalingGroupName": "{{ aws_ec2_autoscale_cluster.name }}"
  with_items: "{{ aws_ec2_autoscale_cluster.asg_cloudwatch_alarms }}"
  when:
    - _aws_ec2_autoscale_cluster_scaling_up_policy_ARN is defined
    - item.scale_direction == 'up'

- name: Create alarm in CloudWatch for auto scaling down.
  include_role:
    name: aws/aws_ec2_metric_alarm
  vars:
    aws_ec2_metric_alarm:
      aws_profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
      region: "{{ aws_ec2_autoscale_cluster.region }}"
      name: "{{ aws_ec2_autoscale_cluster.asg_cloudwatch_alarm_scale_down_name }}"
      description: "{{ item.description }}"
      metric: "{{ item.metric }}"
      namespace: "{{ item.namespace }}"
      statistic: "{{ item.statistic }}"
      comparison: "{{ item.comparison }}"
      threshold: "{{ item.threshold }}"
      unit: "{{ item.unit }}"
      period: "{{ item.period }}"
      evaluation_periods: "{{ item.evaluation_periods }}"
      alarm_actions:
        - "{{ _aws_ec2_autoscale_cluster_scaling_down_policy_ARN }}"
      dimensions:
        "AutoScalingGroupName": "{{ aws_ec2_autoscale_cluster.name }}"
  with_items: "{{ aws_ec2_autoscale_cluster.asg_cloudwatch_alarms }}"
  when:
    - _aws_ec2_autoscale_cluster_scaling_down_policy_ARN is defined
    - item.scale_direction == 'down'

- name: Define default ALB listeners.
  set_fact:
    _aws_ec2_autoscale_cluster_listeners_http:
      Protocol: HTTP
      Port: "80"
      DefaultActions:
        - Type: forward
          TargetGroupName: "{{ aws_ec2_autoscale_cluster.name }}"
    _aws_ec2_autoscale_cluster_listeners_redirect:
      Protocol: HTTP
      Port: "80"
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Host: "#{host}"
            Query: "#{query}"
            Path: "/#{path}"
            Port: "443"
            StatusCode: HTTP_301
    _aws_ec2_autoscale_cluster_listeners_https:
      Protocol: HTTPS
      Port: "443"
      SslPolicy: "{{ aws_ec2_autoscale_cluster.alb_ssl_policy }}"
      Certificates:
        - CertificateArn: "{{ aws_ec2_autoscale_cluster.ssl_certificate_ARN }}"
      DefaultActions:
        - Type: forward
          TargetGroupName: "{{ aws_ec2_autoscale_cluster.name }}"

- name: Add HTTP listeners.
  set_fact:
    _aws_ec2_autoscale_cluster_listeners: "{{ [ _aws_ec2_autoscale_cluster_listeners_http ] }}"
  when: aws_ec2_autoscale_cluster.ssl_certificate_ARN | length < 1

- name: Add HTTPS Listener.
  set_fact:
    _aws_ec2_autoscale_cluster_listeners: "{{ [ _aws_ec2_autoscale_cluster_listeners_redirect, _aws_ec2_autoscale_cluster_listeners_https ] }}"
  when: aws_ec2_autoscale_cluster.ssl_certificate_ARN | length > 1

- name: Add custom Listeners.
  set_fact:
    _aws_ec2_autoscale_cluster_listeners: "{{ _aws_ec2_autoscale_cluster_listeners + aws_ec2_autoscale_cluster.listeners }}"
  when:
    - aws_ec2_autoscale_cluster is defined
    - aws_ec2_autoscale_cluster | length

- name: Create the ALB.
  community.aws.elb_application_lb:
    name: "{{ aws_ec2_autoscale_cluster.name }}"
    profile: "{{ aws_ec2_autoscale_cluster.aws_profile }}"
    region: "{{ aws_ec2_autoscale_cluster.region }}"
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    tags: "{{ aws_ec2_autoscale_cluster.tags }}"
    subnets: "{{ _aws_ec2_autoscale_cluster_public_subnets_ids }}"
    security_groups: "{{ aws_ec2_autoscale_cluster.alb_security_groups + [ _aws_ec2_autoscale_cluster_security_group.group_id ] }}"
    listeners: "{{ _aws_ec2_autoscale_cluster_listeners }}"
  register: _aws_ec2_autoscale_cluster_alb

- name: Get ALB listener ARN for port 443.
  set_fact:
    _aws_ec2_autoscale_cluster_alb_listener_ARN: "{{ item.listener_arn }}"
  when:
    - "{{ item.port == 443 }}"
    - aws_ec2_autoscale_cluster.ssl_extra_certificate_ARNs
    - aws_ec2_autoscale_cluster.ssl_certificate_ARN | length > 1
  with_items: "{{ _aws_ec2_autoscale_cluster_alb.listeners }}"

- name: Add extra SSL certificates to the ALB.
  command:
    cmd: "aws elbv2 add-listener-certificates --region {{ aws_ec2_autoscale_cluster.region }} --profile {{ aws_ec2_autoscale_cluster.aws_profile }} --listener-arn {{ _aws_ec2_autoscale_cluster_alb_listener_ARN }} --certificates CertificateArn={{ item }}"
  when:
    - aws_ec2_autoscale_cluster.ssl_extra_certificate_ARNs
    - aws_ec2_autoscale_cluster.ssl_certificate_ARN | length > 1
  with_items: "{{ aws_ec2_autoscale_cluster.ssl_extra_certificate_ARNs }}"

- name: Create a CloudFront distribution.
  include_role:
    name: aws/aws_cloudfront_distribution
  vars:
    aws_cloudfront_distribution:
      tags: "{{ aws_ec2_autoscale_cluster.tags | combine( { 'Name': aws_ec2_autoscale_cluster.name } ) }}"
      viewer_certificate:
        acm_certificate_arn: "{{ aws_ec2_autoscale_cluster.cf_certificate_ARN }}"
      origins:
        - domain_name: "{{ _aws_ec2_autoscale_cluster_alb.dns_name }}"
          id: "ELB-{{ aws_ec2_autoscale_cluster.name }}"
      default_cache_behavior:
        target_origin_id: "ELB-{{ aws_ec2_autoscale_cluster.name }}"
  when:
    - aws_ec2_autoscale_cluster.cf_certificate_ARN | length > 1

- name: Add a DNS record in route 53.
  community.aws.route53:
    state: "{{ aws_ec2_autoscale_cluster.state }}"
    profile: "{{ aws_ec2_autoscale_cluster.route_53.aws_profile }}"
    zone: "{{ aws_ec2_autoscale_cluster.route_53.zone }}"
    record: "{{ aws_ec2_autoscale_cluster.route_53.record }}"
    type: CNAME
    value: "{{ _aws_cloudfront_distribution.domain_name if _aws_cloudfront_distribution is defined else _aws_ec2_autoscale_cluster_alb.dns_name }}"
    overwrite: true
  when:
    - aws_ec2_autoscale_cluster.route_53.zone is defined
    - aws_ec2_autoscale_cluster.route_53.zone | length > 0

- name: Create peering VPC connections.
  include_tasks: peering.yml
  with_items: "{{ aws_ec2_autoscale_cluster.peering }}"
  loop_control:
    loop_var: peering
