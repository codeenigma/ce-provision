---
- name: Remove legacy repository from sources list.
  ansible.builtin.apt_repository:
    repo: "{{ apt_repository.legacy_repo }}"
    state: absent
  when: apt_repository.legacy_repo | length > 0

# See https://docs.ansible.com/ansible/latest/collections/ansible/builtin/deb822_repository_module.html
- name: Add APT repository in DEB822 format.
  ansible.builtin.deb822_repository:
    name: "{{ apt_repository.name }}"
    types: "{{ apt_repository.types }}"
    uris: "{{ apt_repository.uris }}"
    signed_by: "{{ apt_repository.signed_by | default(omit) }}"
    suites: "{{ apt_repository.suites | default(omit) }}"
    components: "{{ apt_repository.components | default(omit) }}"
    state: "{{ apt_repository.state }}"
    enabled: "{{ apt_repository.enabled }}"
  register: _apt_repository
  when: apt_repository.format == 'deb822'

# See https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_repository_module.html
# This method is obsolete, but some repositories still require it.
- name: Install legacy APT repository.
  when: apt_repository.format == 'list'
  block:
    - name: Create repo string.
      ansible.builtin.set_fact:
        _apt_repository_list_repo_string: "{{ apt_repository.uris[0] }} {{ apt_repository.suites[0] }} {{ apt_repository.components[0] }}"

    - name: Overwrite repo string with provided value, if applicable.
      ansible.builtin.set_fact:
        _apt_repository_list_repo_string: "{{ apt_repository.list_repo_string }}"
      when:
        - apt_repository.list_repo_string is defined
        - apt_repository.list_repo_string | length > 0

    - name: Download repo key, if applicable.
      ansible.builtin.get_url:
        url: "{{ apt_repository.signed_by }}"
        dest: "/etc/apt/keyrings/{{ apt_repository.name }}.asc"
      when:
        - apt_repository.signed_by is defined
        - apt_repository.signed_by | length > 0

    - name: Add key to repo string, if applicable.
      ansible.builtin.set_fact:
        _apt_repository_list_repo_string: "[signed-by=/etc/apt/keyrings/{{ apt_repository.name }}.asc] {{ _apt_repository_list_repo_string }}"
      when:
        - apt_repository.signed_by is defined
        - apt_repository.signed_by | length > 0

    - name: Add APT repository in list format.
      ansible.builtin.apt_repository:
        repo: "{{ item }} {{ _apt_repository_list_repo_string }}"
        state: "{{ apt_repository.state }}"
      with_items: "{{ apt_repository.types }}"

- name: Install systemd timer to renew the key every week.
  when:
    - apt_repository.signed_by is defined
    - apt_repository.signed_by | length > 0
    - apt_repository.signed_by is url # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/url_test.html
  block:
    - name: Create script to refresh APT repository key.
      ansible.builtin.template:
        src: "refresh_key.j2"
        dest: "/usr/local/bin/{{ apt_repository.name }}_key_refresh"
        owner: root
        group: root
        mode: "0755"

    - name: Set up a systemd timer to refresh APT repository key.
      ansible.builtin.include_role:
        name: contrib/systemd_timers
      vars:
        timers:
          mysql_apt_key_refresh:
            timer_command: "/usr/local/bin/{{ apt_repository.name }}_key_refresh"
            timer_OnCalendar: "{{ apt_repository.key_refresh_timer_OnCalendar }}"

- name: Update the APT cache.
  ansible.builtin.apt:
    update_cache: true
