---
- name: Install PHP packages.
  ansible.builtin.apt:
    pkg:
      - "php{{ version }}-cli"
    state: present
  with_items: "{{ php.version }}"
  loop_control:
    loop_var: version

- name: Set php version (phar)
  ansible.builtin.command: "update-alternatives --set phar /usr/bin/phar{{ version }}"
  with_items: "{{ php.version }}"
  loop_control:
    loop_var: version

- name: Set php version (phar.phar)
  ansible.builtin.command: "update-alternatives --set phar.phar /usr/bin/phar.phar{{ version }}"
  with_items: "{{ php.version }}"
  loop_control:
    loop_var: version

- name: Set php version (php)
  ansible.builtin.command: "update-alternatives --set php /usr/bin/php{{ version }}"
  with_items: "{{ php.version }}"
  loop_control:
    loop_var: version

- name: Set php version (php-config)
  ansible.builtin.command: "update-alternatives --set php-config /usr/bin/php-config{{ version }}"
  with_items: "{{ php.version }}"
  loop_control:
    loop_var: version

- name: Copy php.ini for php cli.
  ansible.builtin.template:
    src: php.cli.ini.j2
    dest: "/etc/php/{{ version }}/cli/php.ini"
    force: true
  with_items: "{{ php.version }}"
  loop_control:
    loop_var: version

- name: Trigger overrides
  ansible.builtin.include_role:
    name: _overrides
  vars:
    _overrides: "{{ php.cli.overrides }}"
  when:
    - php.cli.overrides is defined
    - php.cli.overrides | length > 0

- name: Setup composer.
  ansible.builtin.include_role:
    name: debian/php_composer
