---
- name: Ensure system Duplicity is not installed.
  ansible.builtin.apt:
    pkg: duplicity
    state: absent

- name: Ensure Duplicity is not installed globally with pip or pip3 on older versions of Debian.
  ansible.builtin.pip:
    name:
      - duplicity
    state: absent
    executable: "{{ item }}"
  when: ansible_distribution_major_version | int < 12
  with_items:
    - pip
    - pip3
  failed_when: false # don't stop the build if there's no system pip

# Install Python applications.
- name: Set up Python venv variables.
  ansible.builtin.set_fact:
    _venv_path: "{{ duplicity.venv_path }}"
    _venv_command: "{{ duplicity.venv_command }}"
    _install_username: "{{ duplicity.install_username }}"

- name: Ensure pip is at latest version.
  ansible.builtin.pip:
    name:
      - pip
    state: latest
    virtualenv: "{{ duplicity.venv_path | default(_venv_path) }}"
    virtualenv_command: "{{ duplicity.venv_command | default(_venv_command) }}"
  become_user: "{{ duplicity.install_username | default(_install_username) }}"
  become: true

- name: Install python_boto.
  ansible.builtin.include_role:
    name: debian/python_boto

- name: Install Duplicity.
  ansible.builtin.pip:
    name:
      - duplicity
    virtualenv: "{{ duplicity.venv_path | default(_venv_path) }}"
    virtualenv_command: "{{ duplicity.venv_command | default(_venv_command) }}"
  become_user: "{{ duplicity.install_username | default(_install_username) }}"
  become: true

- name: Create install dir.
  ansible.builtin.file:
    path: "{{ duplicity.install_dir }}"
    state: directory

- name: Create binary dir.
  ansible.builtin.file:
    path: "{{ duplicity.install_dir }}/bin"
    state: directory

- name: Create config dir.
  ansible.builtin.file:
    path: "{{ duplicity.install_dir }}/etc"
    state: directory

- name: Copy backup script in place.
  ansible.builtin.template:
    src: "duplicity_backup-{{ duplicity.backend }}.j2"
    dest: "{{ duplicity.install_dir }}/bin/duplicity_backup"
    owner: "{{ duplicity.install_username | default(_install_username) }}"
    group: "{{ duplicity.install_username | default(_install_username) }}"
    mode: 0770

- name: Copy restore script in place.
  ansible.builtin.template:
    src: duplicity_restore-{{ duplicity.backend }}.j2
    dest: "{{ duplicity.install_dir }}/bin/duplicity_restore"
    owner: "{{ duplicity.install_username | default(_install_username) }}"
    group: "{{ duplicity.install_username | default(_install_username) }}"
    mode: 0770

- name: Copy clean-up script in place.
  ansible.builtin.template:
    src: duplicity_clean-{{ duplicity.backend }}.j2
    dest: "{{ duplicity.install_dir }}/bin/duplicity_clean"
    owner: "{{ duplicity.install_username | default(_install_username) }}"
    group: "{{ duplicity.install_username | default(_install_username) }}"
    mode: 0770

- name: Copy include-exclude filelist.
  ansible.builtin.template:
    src: include-exclude-filelist.j2
    dest: "{{ duplicity.install_dir }}/etc/{{ dir.name }}-include-filelist"
    owner: root
    group: root
    mode: 0644
  with_items: "{{ duplicity.dirs }}"
  when: "dir.rules|length"
  loop_control:
    loop_var: dir

# @TODO - cannot currently send failure notifications - see https://github.com/codeenigma/ce-provision/issues/1215
- name: Create systemd timer for Duplicity backup.
  ansible.builtin.include_role:
    name: contrib/systemd_timers
  vars:
    timers:
      duplicity_backup:
        timer_command: "{{ duplicity.install_dir }}/bin/duplicity_backup"
        timer_OnCalendar: "{{ duplicity.on_calendar }}"
  when: duplicity.create_timer

- name: Trigger overrides
  ansible.builtin.include_role:
    name: _overrides
  vars:
    _overrides: "{{ duplicity.overrides }}"
  when:
    - duplicity.overrides is defined
    - duplicity.overrides | length > 0