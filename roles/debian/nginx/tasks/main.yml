---
- name: Ensure nginx is installed.
  ansible.builtin.apt:
    name: nginx
    state: present
    update_cache: true
    cache_valid_time: 240

- name: Set up Python packages.
  ansible.builtin.include_role:
    name: debian/python_common
  vars:
    python_common:
      cleanup: false
      remove_packages: []
      install_packages:
        - python3-pip

- name: Ensure passlib is installed with pip3.
  ansible.builtin.pip:
    name: passlib
    executable: pip3
  when: ansible_distribution_major_version | int < 12

- name: Ensure python3-passlib is installed with apt.
  ansible.builtin.apt:
    pkg: python3-passlib
    state: present
  when: ansible_distribution_major_version | int >= 12

- name: Copy main nginx config.
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: "/etc/nginx/nginx.conf"
    owner: root
    group: root
    mode: 0644

- name: Ensure passwords directory exists.
  ansible.builtin.file:
    path: /etc/nginx/passwords
    state: directory
    mode: "0755"

- name: Copy project type-specific configuration in place.
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/nginx/conf.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
    force: true
  with_items:
    - _common
    - _common_cloudfront
    - custom
    - docker_registry
    - drupal_common
    - drupal7
    - drupal8
    - drupal10
    - flat
    - matomo
    - mautic
    - proxy
    - simplesamlphp
    - symfony3
    - symfony3_prod
    - symfony4
    - wordpress

- name: Check if any vhost is behind CloudFront
  set_fact:
    any_domain_behind_cloudfront: "{{ nginx.domains | json_query('[?is_behind_cloudfront]') | length > 0 }}"

- name: Fetch Cloudfront IPs and keep them updated.
  block:
    - name: Ensure jq is installed.
      ansible.builtin.apt:
        name: jq
        state: present
        update_cache: true
        cache_valid_time: 240

    - name: Copy the CloudFront IP update script.
      ansible.builtin.template:
        src: update-cloudfront-ips.sh.j2
        dest: /usr/local/bin/update-cloudfront-ips.sh
        owner: root
        group: root
        mode: 0755
        force: true

    - name: Fetch CloudFront IPs with the script.
      ansible.builtin.command:
        cmd: /usr/local/bin/update-cloudfront-ips.sh

    - name: Ensure Nginx include file placeholder for failsafe.
      file:
        path: /etc/nginx/conf.d/cloudfront-ips
        state: touch
        owner: root
        group: root
        mode: '0644'

    ## TBD
    # - name: Create systemd timer for CF IPs renewal.
    #   ansible.builtin.include_role:
    #     name: contrib/systemd_timers
    #   vars:
    #     timers: "{{ _cloudfront_ips_renewal_timer }}"
  when: any_domain_behind_cloudfront

- name: Ensure log dir exists.
  ansible.builtin.file:
    path: "/var/log/nginx"
    state: directory

- name: Remove existing vhosts
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled"
    state: absent
  when: nginx.recreate_vhosts

- name: Recreate vhosts folder
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled"
    state: directory
  when: nginx.recreate_vhosts

- name: Check if we have an AWS Cloudwatch folder.
  ansible.builtin.stat:
    path: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d
  register: _nginx_cloudwatch_dir

- name: Generates AWS Cloudwatch default config.
  ansible.builtin.template:
    src: cloudwatch-main.json.j2
    dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/nginx-main.json
  when:
    - _nginx_cloudwatch_dir.stat.isdir is defined and _nginx_cloudwatch_dir.stat.isdir

- name: Generate domain specific configuration.
  ansible.builtin.include_tasks: domain.yml
  with_items: "{{ nginx.domains }}"
  loop_control:
    loop_var: domain
  when:
    - nginx.domains is defined
    - nginx.domains | length > 0
    - nginx.recreate_vhosts

- name: Trigger overrides
  ansible.builtin.include_role:
    name: _overrides
  vars:
    _overrides: "{{ nginx.overrides }}"
  when:
    - nginx.overrides is defined
    - nginx.overrides | length > 0

- name: Test Nginx configuration.
  ansible.builtin.command: nginx -t
  register: nginx_test_result
  failed_when: false

- name: Display Nginx test result.
  ansible.builtin.debug:
    msg: "{{ nginx_test_result.stderr }}"

- name: Fail the playbook if Nginx test fails.
  ansible.builtin.fail:
    msg: "Nginx configuration test failed."
  when: nginx_test_result.rc != 0

- name: Ensure Nginx is restarted.
  ansible.builtin.service:
    name: nginx
    state: restarted
