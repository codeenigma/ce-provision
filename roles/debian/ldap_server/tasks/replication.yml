---
- ansible.builtin.set_fact:
    _ldap_server_bind_pwd: "{{ ldap_server.replication.bind_pwd | default(lookup('password', '/dev/null'), true) }}"

- ansible.builtin.set_fact:
    _ldap_server_bind_pwd_hash: "{{ '{{ _ldap_server_bind_pwd }}' | password_hash('sha512') }}"

- name: Check for existence of bind user on host.
  community.general.ldap_search:
    dn: "{{ ldap_server.replication.searchbase }}"
    bind_dn: "{{ ldap_server.replication.admin_cn }},{{ ldap_server.replication.searchbase }}"
    bind_pw: "{{ ldap_server.replication.admin_pwd }}"
    filter: "({{ ldap_server.replication.bind_cn }})"
    scope: onelevel
  register: _ldap_server_bind_user
  delegate_to: "{{ ldap_server.replication.host }}"

- name: Create bind user on host.
  community.general.ldap_entry:
    dn: "{{ ldap_server.replication.bind_cn }},{{ ldap_server.replication.searchbase }}"
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      description: "Replication user for {{ _domain_name }}"
      userPassword: "{CRYPT}{{ _ldap_server_bind_pwd_hash }}"
    bind_dn: "{{ ldap_server.replication.admin_cn }},{{ ldap_server.replication.searchbase }}"
    bind_pw: "{{ ldap_server.replication.admin_pwd }}"
  delegate_to: "{{ ldap_server.replication.host }}"
  when: not _ldap_server_bind_user.results

- name: Set replication config.
  community.general.ldap_attrs:
    dn: olcDatabase={1}hdb,cn=config
    attributes:
        olcSyncrepl:
          - >-
            rid=123
            provider="ldaps://{{ ldap_server.replication.host }}:{{ ldap_server.replication.port }}/"
            tls_reqcert=never
            type=refreshOnly
            interval={{ ldap_server.replication.interval }}
            searchbase="{{ ldap_server.replication.searchbase }}"
            bindmethod=simple
            binddn="{{ ldap_server.replication.bind_cn }},{{ ldap_server.replication.searchbase }}"
            credentials="{{ _ldap_server_bind_pwd }}"

- name: Stop slapd service.
  ansible.builtin.include_role:
    name: process_manager
  vars:
    process_manager:
      process_name: slapd

- name: Delete existing LDAP data before restarting replication.
  ansible.builtin.file:
    path: /var/lib/ldap
    state: absent

- name: Recreate LDAP data directory.
  ansible.builtin.file:
    path: /var/lib/ldap
    state: directory
    owner: openldap
    group: openldap
    mode: 0755

- name: Start slapd service.
  ansible.builtin.service:
    name: slapd
    state: started
    enabled: true
