---
# cron is not necessarily installed by default.
- name: Ensure cron is installed.
  ansible.builtin.apt:
    name: cron
    state: present
    update_cache: true

# Linters need a newer version of PyYAML than the one that ships with Debian.
- name: Remove older PyYAML package.
  ansible.builtin.apt:
    pkg: ["python3-yaml"]
    state: absent
  when: ce_ansible.linters.enabled

- name: Check pip is still installed.
  ansible.builtin.stat:
    path: /usr/bin/pip
  register: _path_to_pip

- name: Ensure Ansible is not installed by pip.
  ansible.builtin.command:
    cmd: pip uninstall ansible -y
  become: true
  when: _path_to_pip.stat.exists

- name: Set up pip3.
  ansible.builtin.include_role:
    name: python_pip

# Not using 'apt' - this needs to be one task or we break controller servers acting on themselves.
- name: Remove and re-install Ansible.
  ansible.builtin.shell:
    cmd: sudo apt-get -y remove ansible && sudo pip3 install ansible
  become: false

- name: Install linters.
  ansible.builtin.pip:
    name:
      - ansible-lint
      - yamllint
    executable: pip3
  when: ce_ansible.linters.enabled

# This package gets removed with python3-yaml above but we need it for auto-scale.
- name: Install cloud-init.
  ansible.builtin.apt:
    name: cloud-init
  when: ce_ansible.linters.enabled

- name: Create cron entry to upgrade Ansible.
  ansible.builtin.cron:
    name: upgrade_ansible
    minute: "{{ ce_ansible.upgrade.minute | default(omit) }}"
    hour: "{{ ce_ansible.upgrade.hour | default(omit) }}"
    day: "{{ ce_ansible.upgrade.day | default(omit) }}"
    weekday: "{{ ce_ansible.upgrade.weekday | default(omit) }}"
    month: "{{ ce_ansible.upgrade.month | default(omit) }}"
    job: "{{ ce_ansible.upgrade.command }}"
    state: present
    disabled: "{{ ce_ansible.upgrade.disabled | default(omit) }}"
  become: true
  when: ce_ansible.upgrade.enabled
